#+title: My GNU Emacs Configuration
#+author: Gatonegro
#+language: en
#+STARTUP: content
#+OPTIONS: toc:2

* Table of contents :toc:
- [[#an-exercise-in-restraint][An exercise in restraint]]
  - [[#what-this-configuration-is][What this configuration is]]
  - [[#what-this-configuration-is-not][What this configuration is not]]
- [[#the-early-initialisation-of-emacs---early-initel][The early initialisation of Emacs - =early-init.el=]]
  - [[#early-initel-header][=early-init.el= header]]
  - [[#disable-packageel][Disable =package.el=]]
  - [[#garbage-collection][Garbage collection]]
  - [[#performance-hacks]["Performance" hacks]]
  - [[#improving-the-ui][Improving the UI]]
  - [[#default-frame-configuration][Default frame configuration]]
  - [[#early-initel-footer][=early-init.el= footer]]
- [[#emacs-configuration][Emacs configuration]]
  - [[#initel-header][=init.el= header]]
  - [[#package-management---elpaca][Package management - Elpaca]]
  - [[#emacs-itself][Emacs itself]]
  - [[#dired][Dired]]
  - [[#electric][Electric]]
  - [[#org][Org]]
  - [[#projectel][Project.el]]
  - [[#window-management][Window management]]
- [[#third-party-packages][Third-party packages]]
  - [[#appearance][Appearance]]
  - [[#completions-framework][Completions framework]]
  - [[#dired-enhancements][Dired enhancements]]
  - [[#evil-mode][Evil mode]]
  - [[#general---keybindings][General - Keybindings]]
  - [[#tools][Tools]]
  - [[#which-key][Which-Key]]
- [[#lsp][LSP]]
  - [[#flycheck][Flycheck]]
  - [[#treesit-auto][Treesit-auto]]
  - [[#lsp-mode][LSP-mode]]
- [[#language-support][Language support]]
  - [[#markdown][Markdown]]
  - [[#lua][Lua]]
  - [[#typst][Typst]]
  - [[#initel-footer][=init.el= footer]]

* An exercise in restraint

Configuring Emacs is, essentially, an exercise in restraint. Because it is endlessly extensible by design, an entire lifetime can be spent moulding it into all sorts of different things, for any purpose one could possibly imagine. This is what I aim to avoid here.

** What this configuration is

1. *Minimal -* As a newcomer to Emacs, and because it is my personal preference in general, I want this to be a configuration that does what I need, and nothing else. And, yes, I do realise the irony of setting that goal for a kitchen-sink piece of software such as Emacs.

2. *Transparent -* While I could go online and take snippets from other configs, and put them here to enable all manner of new functionality, I prefer to stick with a configuration I can understand at my current level of familiarity with Emacs and Elisp in general.

3. *Experimental -* Though my main goal is for this setup to be useful for my daily work, I also want to use it to explore what Emacs can do and how it works. Over time, as my familiarity with it grows, I might revisit parts of it to add or remove things. Overall, it should be a bit of a playground in addition to an actual tool that I use to get things done.

** What this configuration is not

1. *An "everything" setup -* At this point, I don't believe it would make sense for me to try and emulate the setups of advanced users who do /everything/ in Emacs — web browsing, media playing, window management, etc. I do not understand the software nearly enough to do that, and my current workflow suits me quite well. As far as functionality goes, it should be similar to my Neovim configuration instead of its own operating system.

2. *A clone of DOOM or Spacemacs -* I have not used those distributions, for the same reason I don't use Neovim distributions — they are an additional layer between the user and the software, give the user a somewhat misplaced confidence in their command of the software, and obscure fundamental aspects of it that I would prefer to get to know myself. They are useful for certain users, in certain cases, but I prefer the DIY approach.

3. *Neovim -* My preferred tool, one I am significantly more familiar and comfortable with. Trying to turn Emacs into Neovim seems silly; I already have a Neovim configuration, and it does everything I need. My Emacs configuration should be its own thing, /an Emacs thing/, that works in Emacs ways. There is probably an exception to be made here regarding modal editing and Vim motions, because Vim brain is a thing.

* The early initialisation of Emacs - =early-init.el=
:PROPERTIES:
:header-args: :tangle early-init.el
:END:

** =early-init.el= header

Because we are doing things the "Emacs way", we begin by following convention, and having a nice header in our =early-init.el= file. We will also have a footer once we're done.

#+begin_src emacs-lisp
;;; early-init.el --- Early Init -*- no-byte-compile: t; lexical-binding: t; -*-

;; Author: Adolf Gatonegro
;; URL: https://github.com/adolfgatonegro

;;; Commentary:
;; Early initialisation file for my GNU Emacs configuration.

;;; Code:
#+end_src

** Disable =package.el=

We will use [[https://github.com/progfolio/elpaca][Elpaca]] to install and manage our packages, because it has some lovely async capabilities and a nice GUI. The built-in =package.el= is itself quite capable, and we could simply stick with it and =package-vc=, but I am not manually requiring Lua modules in my Neovim config, am I?

#+begin_src emacs-lisp
;; Disable `package.el' here, required to use Elpaca later
(setq package-enable-at-startup nil)
#+end_src

** Garbage collection

This bit comes from [[https://github.com/jamescherti/minimal-emacs.d][minimal-emacs.d]], which includes all sorts of esoteric optimisations and "better defaults" that, quite frankly, I do not understand. This one makes sense, though, and so I am lifting it. Most configurations I have encountered make some changes to the garbage collection process on startup, but this is the only one I have seen that restores the default gc settings after startup, as recommended by the Emacs documentation.

#+begin_src emacs-lisp
;;; Garbage collection
;; Garbage collection significantly affects startup times. This setting delays
;; garbage collection during startup but will be reset later.
(defvar gato-gc-cons-threshold (* 16 1024 1024)
  "The value of `gc-cons-threshold' after Emacs startup.")

(setq gc-cons-threshold most-positive-fixnum)

(add-hook 'elpaca-after-init-hook
          (lambda ()
            (setq gc-cons-threshold gato-gc-cons-threshold)))
#+end_src

** "Performance" hacks

[[https://git.sr.ht/~ashton314/emacs-bedrock][emacs-bedrock]] is a much more approachable starting point for a noob like myself. The author includes these "performance hacks" in the =early-init.el=, and they seem fairly sensible to me. How much of a difference they make, I cannot say for sure.

#+begin_src emacs-lisp
;; Prefer loading newer compiled files
(setq load-prefer-newer t)

;; Font compacting can be very resource-intensive, especially when rendering
;; icon fonts on Windows. This will increase memory usage.
(setq inhibit-compacting-font-caches t)

(unless (daemonp)
  (let ((old-value (default-toplevel-value 'file-name-handler-alist)))
    (set-default-toplevel-value
     'file-name-handler-alist
     ;; Determine the state of bundled libraries using calc-loaddefs.el.
     ;; If compressed, retain the gzip handler in `file-name-handler-alist`.
     ;; If compiled or neither, omit the gzip handler during startup for
     ;; improved startup and package load time.
     (if (eval-when-compile
           (locate-file-internal "calc-loaddefs.el" load-path))
         nil
       (list (rassq 'jka-compr-handler old-value))))
    ;; Ensure the new value persists through any current let-binding.
    (set-default-toplevel-value 'file-name-handler-alist
                                file-name-handler-alist)
    ;; Remember the old value to reset it as needed.
    (add-hook 'elpaca-after-init-startup-hook
              (lambda ()
                (set-default-toplevel-value
                 'file-name-handler-alist
                 ;; Merge instead of overwrite to preserve any changes made
                 ;; since startup.
                 (delete-dups (append file-name-handler-alist old-value))))
              101))
        (setq command-line-x-option-alist nil))

;; Native compilation and Byte compilation
(if (and (featurep 'native-compile)
         (fboundp 'native-comp-available-p)
         (native-comp-available-p))
    ;; Activate `native-compile'
    (setq native-comp-jit-compilation t
          native-comp-deferred-compilation t  ; Obsolete since Emacs 29.1
          package-native-compile t)
  ;; Deactivate the `native-compile' feature if it is not available
  (setq features (delq 'native-compile features)))

(setq byte-compile-warnings '(not obsolete))
(setq native-comp-async-report-warnings-errors 'silent)
(setq warning-suppress-log-types '((comp) (bytecomp)))

(setopt initial-major-mode 'fundamental-mode)  ; default mode for the *scratch* buffer
#+end_src

** Improving the UI

We want a keyboard-driven environment, and for that we do not need any of these UI elements. Besides, the Emacs UI is kind of ugly. While we're here, we also get rid of the splash screen.

#+begin_src emacs-lisp
;;; Minimal UI
(menu-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(scroll-bar-mode -1)
(pixel-scroll-precision-mode 1) ;; Enable smooth scrolling

(setq inhibit-startup-echo-area-message (user-login-name)) ;; Silence startup message
(advice-add #'display-startup-echo-area-message :override #'ignore)

(setq inhibit-splash-screen t
      use-file-dialog nil
      use-dialog-box nil
      tab-bar-new-button-show nil
      tab-bar-close-button-show nil
      tab-line-close-button-show nil)
#+end_src

** Default frame configuration

#+begin_src emacs-lisp
;; Default frame configuration
(setq frame-resize-pixelwise t)
(setq default-frame-alist '((fullscreen . maximized)
                            (vertical-scroll-bars . nil)
                            (horizontal-scroll-bars . nil)
                            (background-color . "#16161c")
                            (ns-appearance . dark)
                            (alpha . 100)
                            (alpha-background . 90)
                            (ns-transparent-titlebar . t)))
#+end_src

** =early-init.el= footer

That's all for the early initialisation. Now we can finish with the footer:

#+begin_src emacs-lisp
(provide 'early-init)

;;; early-init.el ends here
#+end_src

* Emacs configuration
:PROPERTIES:
:header-args: :tangle init.el
:END:

With the =early-init.el= taken care of, we can begin configuring Emacs itself.

** =init.el= header

Something, something, follow convention.

#+begin_src emacs-lisp
;;; init.el --- Emacs Init -*- no-byte-compile: t; lexical-binding: t; -*-

;; Author: Adolf Gatonegro
;; URL: https://github.com/adolfgatonegro

;;; Commentary:
;; The main configuration file for Emacs.

;;; Code:
#+end_src

** Package management - Elpaca

Use this [[https://github.com/progfolio/elpaca?tab=readme-ov-file#installer][unsightly mess]] to bootstrap Elpaca.

#+begin_src emacs-lisp
;;; Package management
;; Clone, build, and initialise Elpaca.
(defvar elpaca-installer-version 0.7)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                 ,@(when-let ((depth (plist-get order :depth)))
                                                     (list (format "--depth=%d" depth) "--no-single-branch"))
                                                 ,(plist-get order :repo) ,repo))))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+end_src

Next, we enable =use-package= support for Elpaca, and set =:ensure t=
by default, to make sure we always have the packages we need.

#+begin_src emacs-lisp
;; Enable `use-package` support for convenience.
(elpaca elpaca-use-package
  (elpaca-use-package-mode))
;; Always ensure the packages we want are installed.
(setq use-package-always-ensure t)
#+end_src

** Emacs itself

For consistency, we configure Emacs via a =use-package= statement, in
the same way we configure everything else. This is mostly about better
defaults, because the... /default/ defaults are not exactly sane.

#+begin_src emacs-lisp
;;; Configuring Emacs itself
(use-package emacs
  :ensure nil ;; Important for built-in packages.

  :init
  ;; Keep backup and save files in a dedicated directory.
  (setq backup-directory-alist
    `((".*" . ,(concat user-emacs-directory "backups")))
    auto-save-file-name-transforms
    `((".*" ,(concat user-emacs-directory "backups") t)))

  (setq create-lockfiles nil) ;; No need to create lockfiles.

  (set-charset-priority 'unicode) ;; UTF-8 everywhere.
  (setq locale-coding-system 'utf-8
        coding-system-for-read 'utf-8
        coding-system-for-write 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (setq default-process-coding-system '(utf-8-unix . utf-8-unix))

  :custom
  ;; Better defaults.
  (auto-save-default nil)                 ;; Don't autosave buffers.
  (backup-by-copying t)                   ;; Use copying to create backups.
  (column-number-mode t)                  ;; Display the column number in the mode line.
  (delete-by-moving-to-trash t)           ;; Move deleted files to the trash instead of permanently deleting them.
  (delete-selection-mode 1)               ;; Enable replacing selected text with typed text.
  (frame-inhibit-implied-resize t)        ;; Useless for a tiling window manager.
  (global-auto-revert-mode nil)           ;; Disable global auto-revert mode.
  (global-auto-revert-non-file-buffers 1) ;; Automatically refresh non-file buffers.
  (indent-tabs-mode nil)                  ;; No tabs.
  (ispell-dictionary "en_GB")             ;; Set the default dictionary for spell checking.
  (recentf-mode 1)                        ;; Enable tracking of recently opened files.
  (save-place-mode 1)                     ;; Enable saving the place in files for easier return.
  (savehist-mode 1)                       ;; Enable saving of command history.
  (sentence-end-double-space nil)         ;; Seriously, no one does this anymore.
  (split-width-threshold 300)             ;; Prevent window splitting if the window width exceeds 300 pixels.
  (tab-width 4)                           ;; Set the tab width to 4 spaces.
  (use-short-answers t)                   ;; Use short answers in prompts.
  (winner-mode)                           ;; Enable winner mode to easily undo window config changes.
  (xterm-mouse-mode 1)                    ;; Enable mouse support in terminal mode.

  (modify-coding-system-alist 'file "" 'utf-8)

  ;; Interface enhancements
  (blink-cursor-mode -1)                    ;; Steady cursor.
  (display-line-numbers-type 'relative)     ;; Use relative line numbering in programming modes.
  (display-line-numbers-width 3)            ;; Set a minimum for line numbers width.
  (file-name-shadow-mode 1)                 ;; Enable shadowing of filenames for clarity.
  (global-display-line-numbers-mode 1)      ;; Display line-numbers mode globally.
  (global-hl-line-mode nil)                 ;; Highlight the current line.
  (global-visual-line-mode t)               ;; Visual-Line mode in all buffers.
  (indicate-buffer-boundaries 'left)        ;; Show buffer top and bottom in the margin.
  (show-paren-mode t)                       ;; Highlight matching parens.
  (show-trailing-whitespace nil)            ;; Self-explanatory.
  (switch-to-buffer-obey-display-actions t) ;; Make switching buffers more consistent.
  (x-underline-at-descent-line nil)         ;; Prettier underlines.

  ;; Minibuffer/completion settings.
  (completion-auto-help 'always)                  ; Open completion always; `lazy' another option.
  (completion-auto-select 'second-tab)
  (completion-cycle-threshold 1)                  ; TAB cycles candidates.
  (completion-styles '(basic initials substring)) ; Different styles to match input to candidates.
  (completions-detailed t)                        ; Show annotations.
  (completions-format 'one-column)
  (completions-group t)
  (completions-max-height 20)                     ; This is arbitrary.
  (enable-recursive-minibuffers t)                ; Use the minibuffer whilst in the minibuffer.
  (tab-always-indent 'complete)                   ; When I hit TAB, try to complete, otherwise, indent.

  ;; Display a counter showing the number of the current and the other
  ;; matches.  Place it before the prompt, though it can be after it.
  (setq isearch-lazy-count t)
  (setq lazy-count-prefix-format "(%s/%s) ")
  (setq lazy-count-suffix-format nil)

  (keymap-set minibuffer-mode-map "TAB" 'minibuffer-complete) ; TAB acts more like how it does in the shell.

  :config
  ;; Make sure ] b and [ b will always load a file buffer.
  (defun skip-these-buffers (_window buffer _bury-or-kill)
    "Function for `switch-to-prev-buffer-skip'."
    (string-match "\\*[^*]+\\*" (buffer-name buffer)))
    (setq switch-to-prev-buffer-skip 'skip-these-buffers)

  ;; Custom file.
  (setq custom-file (locate-user-emacs-file "custom-vars.el")) ;; Specify the custom file path.
  (load custom-file 'noerror 'nomessage) ;; Load the custom file quietly, ignoring errors.

  ;; Vim brain.
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  ;; Hide commands in M-x which don't work in the current mode.
  (setq read-extended-command-predicate #'command-completion-default-include-p))

  ;; Disable line numbers and hl-line mode in certain contexts.
  (dolist (mode
           '(dashboard-mode-hook
             eshell-mode-hook
             markdown-mode-hook
             nov-mode-hook
             org-mode-hook
             shell-mode-hook
             term-mode-hook
             typst-ts-mode-hook))
    (add-hook mode (lambda () (hl-line-mode 0)))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Dired

Some better defaults for =dired=, courtesy of [[https://github.com/LionyxML/emacs-kick][emacs-kick]] again. [[*Dired enhancements][Dired enhancements]], [[*Dired][Dired keybindings]].

#+begin_src emacs-lisp
;;; Dired configuration
(use-package dired
  :ensure nil
  :defines dired-mode-map
  :config
  (setq dired-listing-switches "-AGFhlv --group-directories-first --time-style=long-iso"
        dired-dwim-target t
        dired-guess-shell-alist-user '((".*" "xdg-open"))
        dired-kill-when-opening-new-dired-buffer t
        dired-auto-revert-buffer #'dired-directory-changed-p
        dired-make-directory-clickable t
        dired-mouse-drag-files t)
  :init
  (add-hook 'dired-mode-hook
            (lambda ()
              (dired-hide-details-mode)
              (hl-line-mode)
              (auto-revert-mode)
              (setq-default auto-revert-interval 1)
              (auto-revert-set-timer))))
#+end_src

** Electric

Enable and configure Electric to take care of parens matching.

TODO: move org-src indent to its proper location.

#+begin_src emacs-lisp
;;; Electric
(use-package electric
  :ensure nil
  :init
  (electric-pair-mode +1) ;; automatically insert closing parens
  (electric-indent-mode -1) ;; weird and inconsistent as hell, go away
  (setq electric-pair-preserve-balance t
        ;; TODO: Why is this here?
        org-edit-src-content-indentation 0))
  ;; Do not auto-pair <> in Org mode, otherwise org-tempo can break.
  (add-hook 'org-mode-hook (lambda ()
             (setq-local electric-pair-inhibit-predicate
                     `(lambda (c)
                    (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
#+end_src

** Org

Org seems to be /massive/. We're not going to be doing much with it at
this point, because I don't quite understand what is going on there.
+Still, something tells me that having a separate top-level heading for
everything Org-related is a wise idea.+

*** Org settings

First, Org mode itself.

#+begin_src emacs-lisp
;;; Org mode
;;
(use-package org
  :ensure nil
  :defer t
  :init
  ;; Edit settings
  (setq org-auto-align-tags nil
	    org-tags-column 0
	    org-catch-invisible-edits 'show-and-error
	    org-special-ctrl-a/e t ;; special navigation behaviour in headlines
	    org-insert-heading-respect-content t

        ;; Styling, hide markup, etc.
        org-startup-indented nil
        org-pretty-entities t
        org-use-sub-superscripts "{}"
        org-hide-emphasis-markers t
        org-startup-with-inline-images t
        org-image-actual-width '(300)
        org-src-fontify-natively t
        org-highlight-latex-and-related '(native)

        ;; Agenda styling
        org-agenda-tags-column 0
	    org-agenda-block-separator ?─
	    org-agenda-time-grid
	    '((daily today require-timed)
	      (800 1000 1200 1400 1600 1800 2000)
	      " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
	    org-agenda-current-time-string
	    "⭠ now ─────────────────────────────────────────────────")

  (setq org-ellipsis " ")

  ;;; Return or left-click with mouse follows link
  (customize-set-variable 'org-return-follows-link t)
  (customize-set-variable 'org-mouse-1-follows-link t))
#+end_src

*** org-appear

Show emphasis and other markdown of text under point, otherwise keep it hidden.

#+begin_src emacs-lisp
(use-package org-appear
  :defer t
  :after org
  :config
  (setq org-appear-autoemphasis t
        org-appear-autosubmarkers t
        org-appear-autolinks t)
  :hook
  (org-mode . org-appear-mode))
#+end_src

*** org-tempo

=org-tempo= provides template expansion for Org documents. Why is it
disabled by default? Only RMS knows.

#+begin_src emacs-lisp
;; org-tempo
(use-package org-tempo
  :ensure nil
  :after org
  :config
   (dolist (item '(("sh" . "src sh")
                   ("el" . "src emacs-lisp")
                   ("lu" . "src lua")
                   ("py" . "src python")))
   (add-to-list 'org-structure-template-alist item)))
#+end_src

*** toc-org

Generate tables of contents inside Org documents.

#+begin_src emacs-lisp
;; toc-org
(use-package toc-org
  :after org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

*** org-modern

#+begin_src emacs-lisp
;;; org-modern
(use-package org-modern
  :defer t
  :config
  (setq org-modern-fold-stars '(("󰬪" . "󰬦")
                                ("󰬫" . "󰬧")
                                ("󰅂" . "󰅀")
                                ("󰄾" . "󰄼")
                                ("󰶻" . "󰶹")))
  :custom
  (org-modern-hide-stars 'leading)
  (org-modern-keyword t)
  (org-modern-checkbox nil)
  (org-modern-table nil)
  (org-modern-star 'fold)

  :hook
  (org-mode . global-org-modern-mode))
#+end_src

*** org-tree-slide

Simple slideshow functionality for Org documents based on headings.

#+begin_src emacs-lisp
;; org-tree-slide
(use-package org-tree-slide
  :defer t)
#+end_src

*** TODO ox-typst

Org mode to Typst exporter, very early in development. [[https://github.com/jmpunkt/ox-typst][jmpunkt/ox-typst]]

#+begin_src emacs-lisp :tangle no
;; ox-typst
(use-package ox-typst
  :defer t
  :after org
  :ensure (ox-typst :host github :repo "jmpunkt/ox-typst"))
#+end_src

** Project.el

#+begin_src emacs-lisp
(use-package project
  :ensure nil
  :defer t)
#+end_src

** Window management

Some window management tweaks (no, not that kind), based on [[https://github.com/LionyxML/emacs-kick][emacs-kick]].

#+begin_src emacs-lisp
;;; Emacs window management
(use-package window
  :ensure nil
  :custom
  (display-buffer-alist
   '(
	 ;; ("\\*.*e?shell\\*"
     ;;  (display-buffer-in-side-window)
     ;;  (window-height . 0.25)
     ;;  (side . bottom)
     ;;  (slot . -1))

     ("\\*\\(Backtrace\\|Warnings\\|Compile-Log\\|[Hh]elp\\|Messages\\|Bookmark List\\|Ibuffer\\|Occur\\|eldoc.*\\)\\*"
      (display-buffer-in-side-window)
      (window-height . 0.25)
      (side . bottom)
      (slot . 0))

     ;; Example configuration for the LSP help buffer,
     ;; keeps it always on bottom using 25% of the available space:
     ("\\*\\(lsp-help\\)\\*"
      (display-buffer-in-side-window)
      (window-height . 0.25)
      (side . bottom)
      (slot . 0))

     ;; Configuration for displaying various diagnostic buffers on
     ;; bottom 25%:
     ("\\*\\(Flymake diagnostics\\|Flycheck error messages\\||xref\\|ivy\\|Swiper\\|Completions\\)"
      (display-buffer-in-side-window)
      (window-height . 0.25)
      (side . bottom)
      (slot . 1))
   )))
#+end_src

* Third-party packages
:PROPERTIES:
:header-args: :tangle init.el
:END:

Don't overdo it, though.

#+begin_src emacs-lisp
;;; Third-party packages
#+end_src

** Appearance

We want a minimal Emacs, but we also want a nice-looking Emacs.

*** Fonts

Define the default fonts we want Emacs to use, as well as some more comfortable line spacing.

#+begin_src emacs-lisp
;;; Fonts
;;
;; Define default, variable pitch, and fixed pitch fonts.
(set-face-attribute 'default nil
  :family "monospace"
  :height 100)
(set-face-attribute 'variable-pitch nil
  :family "ETbb"
  :height 1.5
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :family "monospace"
  :height 1.0)

;; Display commented text and keywords in italics, requires a font with italics support.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; Adjust line spacing.
(setq-default line-spacing 0.35)

;; Org mode title heights
(custom-set-faces
  '(org-document-title ((t (:inherit default :height 1.4))))
  '(org-level-1 ((t (:inherit outline-1 :height 1.4))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.3))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.2))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.1))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.0)))))
#+end_src

*** Nerd Icons

We cannot have a modern editor without Nerd Icons, can we? Yes, we can, but we won't.

#+begin_src emacs-lisp
;;; Icons
;;
;; nerd-icons
(use-package nerd-icons
  :defer t)

;; nerd-icons-dired
(use-package nerd-icons-dired
  :defer t
  :hook
  (dired-mode . nerd-icons-dired-mode))

;; nerd-icons-completion
(use-package nerd-icons-completion
  :after (:all nerd-icons marginalia)
  :config
  (nerd-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
#+end_src

*** Theme and modeline

It's Tokyo Night with custom colours, what else would it be?

#+begin_src emacs-lisp
;;; Theme
;;
;; Add local themes to path
(add-to-list 'custom-theme-load-path (concat user-emacs-directory "themes"))

;; doom-themes
(use-package doom-themes
  :config
  ;; Global settings
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  ;; doom-themes tweaks
  (doom-themes-visual-bell-config)
  (doom-themes-org-config)

  ;; Load a theme
  (load-theme 'doom-gatonegro t))

;; doom-modeline
;; NOTE: Install `extra/ttf-nerd-fonts-symbols-mono', otherwise icon spacing is broken
(use-package doom-modeline
  :defer t
  :config
  (setq doom-modeline-icon t        ; enable icons
        doom-modeline-bar-width 5   ; set the bar width
        doom-modeline-height 35     ; set modeline height
        doom-modeline-persp-icon t  ; add perspective name to modeline
        doom-modeline-persp-name t) ; add folder icon next to persp name
  :hook
  (elpaca-after-init . doom-modeline-mode))
#+end_src

*** Dashboard

Entirely unnecessary, but it looks good.

#+begin_src emacs-lisp
;; dashboard
(use-package dashboard
  :defer t
  :init
  (setq initial-buffer-choice 'dashboard-open
        dashboard-path-style 'truncate-middle
        dashboard-set-heading-icons t
        dashboard-set-file-icons t
        dashboard-icon-type 'nerd-icons
        dashboard-banner-logo-title "«Objects such as corpses, painful to view in themselves, can become delightful to contemplate.»"
        ;;dashboard-startup-banner 'logo ;; use standard emacs logo as banner
        dashboard-startup-banner (concat user-emacs-directory "themes/gatonegro.png")
        dashboard-projects-backend 'project-el
        dashboard-center-content t ;; set to 't' for centered content
        dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (projects . 3)
                          (registers . 3)))
  :config
  (dashboard-setup-startup-hook))
#+end_src

*** Spacious-padding

The lack of padding around the buffers is 1) baffling; and 2) rather annoying. This here is a bit of a hack, from what I can gather, but it is better than having text running into the edge of the frame.

#+begin_src emacs-lisp
(use-package spacious-padding
  :disabled t
  :defer t
  :config
    (setq spacious-padding-widths
      '( :internal-border-width 20
         :header-line-width 4
         :mode-line-width 0
         :tab-width 4
         :right-divider-width 15
         :scroll-bar-width 4))
  :hook
   (elpaca-after-init . spacious-padding-mode))
#+end_src

** Completions framework

This selection comes from [[https://github.com/LionyxML/emacs-kick][emacs-kick]], though it seems to be fairly
common in newer configurations. To be honest, though, simply turning
on =ido-mode= sounds tempting.

*** Vertico

#+begin_src emacs-lisp
;;; Completions framework
;;
;; Vertico
(use-package vertico
  :defer t
  :custom
  (vertico-count 10)                    ;; Number of candidates to display in the completion list.
  (vertico-resize nil)                  ;; Disable resizing of the vertico minibuffer.
  (vertico-cycle nil)                   ;; Do not cycle through candidates when reaching the end of the list.
  :config
  ;; Navigate Vertico with C-j and C-k.
  (define-key vertico-map (kbd "C-j") #'vertico-next)
  (define-key vertico-map (kbd "C-k") #'vertico-previous)
  ;; Customize the display of the current candidate in the completion list.
  ;; This will prefix the current candidate with “» ” to make it stand out.
  ;; Reference: https://github.com/minad/vertico/wiki#prefix-current-candidate-with-arrow
  (advice-add #'vertico--format-candidate :around
    (lambda (orig cand prefix suffix index _start)
      (setq cand (funcall orig cand prefix suffix index _start))
      (concat
        (if (= vertico--index index)
          (propertize "» " 'face '(:foreground "#80adf0" :weight bold))
          "  ")
        cand)))
  :hook
   (elpaca-after-init . vertico-mode))
#+end_src

*** Orderless

#+begin_src emacs-lisp
;; Orderless
(use-package orderless
  :defer t                                    ;; Load Orderless on demand.
  :after vertico                              ;; Ensure Vertico is loaded before Orderless.
  :init
  (setq completion-styles '(orderless basic)  ;; Set the completion styles.
        completion-category-defaults nil      ;; Clear default category settings.
        completion-category-overrides '((file (styles partial-completion))))) ;; Customize file completion styles.
#+end_src

*** Marginalia

#+begin_src emacs-lisp
;; Marginalia
(use-package marginalia
  :defer t
  :hook
  (elpaca-after-init . marginalia-mode))
#+end_src

*** Company

#+begin_src emacs-lisp
;; Company
(use-package company
  :defer t
  :custom
  (company-tooltip-align-annotations t)      ;; Align annotations with completions.
  (company-minimum-prefix-length 1)          ;; Trigger completion after typing 1 character
  (company-idle-delay 0.2)                   ;; Delay before showing completion (adjust as needed)
  (company-tooltip-maximum-width 50)
  :config

  ;; While using C-p C-n to select a completion candidate
  ;; C-y quickly shows help docs for the current candidate
  (define-key company-active-map (kbd "C-y")
			  (lambda ()
				(interactive)
				(company-show-doc-buffer)))
  (define-key company-active-map [tab] 'company-complete-selection)
  (define-key company-active-map [ret] 'company-complete-selection)
  (define-key company-active-map [escape] 'company-abort)
  (define-key company-active-map (kbd "RET") 'company-complete-selection)
  (define-key company-active-map (kbd "C-j") 'company-select-next)
  (define-key company-active-map (kbd "C-k") 'company-select-previous)
  :hook
  (elpaca-after-init . global-company-mode)) ;; Enable Company Mode globally after initialization.
#+end_src

*** Consult

Better search and navigation commands. [[*Consult][Consult keybindings]].

#+begin_src emacs-lisp
;; Consult
(use-package consult
  :defer t
  :init
  ;; Enhance register preview with thin lines and no mode line.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult for xref locations with a preview feature.
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref))
#+end_src

*** Embark

#+begin_src emacs-lisp
;; Embark
(use-package embark
  :defer t)
#+end_src

*** Embark-Consult

#+begin_src emacs-lisp
;; Embark-Consult
(use-package embark-consult
  :after (:all consult embark)
  :hook
  (embark-collect-mode . consult-preview-at-point-mode)) ;; Enable preview in Embark collect mode.
#+end_src

** Dired enhancements

Nothing crazy here, just some extensions and quality-of-life improvements for =dired=.

#+begin_src emacs-lisp
;;; Dired enhancements
;;
;; * dired-+
(use-package dired-x
  :ensure nil
  :after dired)

;; * dired-open
(use-package dired-open
  :after dired
  :config
  (setq dired-open-extensions '(("gif" . "xdg-open")
                                ("jpg" . "xdg-open")
                                ("png" . "xdg-open")
                                ("mkv" . "xdg-open")
                                ("m4v" . "xdg-open")
                                ("mp4" . "xdg-open"))))

;; * dired-preview
(use-package dired-preview
  :after dired
  :config
     (setq dired-preview-delay 0.7)
     (setq dired-preview-max-size (expt 2 20))
     (setq dired-preview-ignored-extensions-regexp
             (concat "\\."
                     "\\(gz\\|"
                     "zst\\|"
                     "tar\\|"
                     "xz\\|"
                     "rar\\|"
                     "zip\\|"
                     "iso\\|"
                     "epub"
                     "\\)")))
#+end_src

** Evil mode

For my own sanity, get some Vim motions going here.

#+begin_src emacs-lisp
;; Evil - Vim motions
(use-package evil
  :defer t
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil
        evil-vsplit-window-right t
        evil-split-window-below t
        evil-respect-visual-line-mode t
        evil-want-Y-yank-to-eol t
        evil-undo-system 'undo-tree)

  ;; Unbind SPC and TAB so we can use them elsewhere.
  (with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "TAB") nil))

  :config
  (evil-set-initial-state 'vterm-mode 'emacs)

  :hook
  (elpaca-after-init . evil-mode))
#+end_src

*** Evil collection

Provides =evil= support for a bunch of different modes.

#+begin_src emacs-lisp
;; Evil-Collection
(use-package evil-collection
  :defer t

  :custom
  (evil-collection-want-find-usages-bindings t)

  :hook
  (evil-mode . evil-collection-init))
#+end_src

** General - Keybindings

There is no denying that the default Emacs keybindings are... /sub-optimal/, if you will; even with my [[https://github.com/rvaiya/keyd][CapsLock key mapped to Control]], I find them quite uncomfortable after a while. So, we're going to make some changes.

*** Install =general.el= and set =leader-keys=

#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup) ;; integrate general with evil

  ;; set up 'SPC' as the global leader key
  (general-create-definer gato/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode

  ;; set up ',' as the local leader key
  (general-create-definer gato/local-leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "," ;; set local leader
    :global-prefix "M-,") ;; access local leader in insert mode
#+end_src

*** Buffers

#+begin_src emacs-lisp
  ;; Buffers
  (gato/leader-keys
    "b" '(:ignore t :wk "Buffer")
    "b b" '(switch-to-buffer :wk "Switch buffer")
    "b i" '(ibuffer :wk "Ibuffer")
    "b k" '(kill-this-buffer :wk "Kill current buffer")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Revert buffer"))
#+end_src

*** Consult

#+begin_src emacs-lisp
  ;; Consult
  (gato/leader-keys
    "c" '(:ignore t :wk "Consult")
    "c f" '(consult-fd :wk "Find files with 'fd' in DIR")
    "c g" '(consult-grep :wk "Find files with 'grep' in DIR")
    "c h" '(consult-outline :wk "Jump to outline heading")
    "c l" '(consult-line :wk "Find matching line")
    "c o" '(consult-org-heading :wk "Jump to Org heading"))
#+end_src

*** Diff-hl

#+begin_src emacs-lisp
  (general-define-key
    :states 'normal
    "] c" '(diff-hl-next-hunk :wk "Next diff hunk")
    "[ c" '(diff-hl-previous-hunk :wk "Previous diff hunk"))
#+end_src

*** Dired

#+begin_src emacs-lisp
  ;; Dired
  (gato/leader-keys
    "d" '(:ignore t :wk "Dired")
    "d d" '(dired :wk "Open Dired")
    "d j" '(dired-jump :wk "Dired jump to current")
    "d w" '(:ignore t :wk "Writable Dired")
    "d w w" '(wdired-change-to-wdired-mode :wk "Enable writable Dired")
    "d w a" '(wdired-abort-changes :wk "Abort writable Dired changes")
    "d w f" '(wdired-finish-edit :wk "Finish writable Dired edit"))

  (general-define-key
    :states 'normal
    :keymaps 'dired-mode-map
    "C-c o" 'dired-open-xdg
    "M-RET" 'dired-display-file
    "h" 'dired-up-directory
    "l" 'dired-open-file
    "m" 'dired-mark
    "t" 'dired-toggle-marks
    "u" 'dired-unmark
    "o" 'dired-open-xdg
    "p" 'dired-preview-mode
    "v" 'dired-view-file
    "C" 'dired-do-copy
    "D" 'dired-do-delete
    "J" 'dired-goto-file
    "M" 'dired-do-chmod
    "O" 'dired-do-chown
    "P" 'dired-do-print
    "R" 'dired-do-rename
    "T" 'dired-do-touch
    "Z" 'dired-do-compress
    "+" 'dired-create-directory
    "-" 'dired-up-directory
    "% l" 'dired-downcase
    "% m" 'dired-mark-files-regexp
    "% u" 'dired-upcase
    "* %" 'dired-mark-files-regexp
    "* ." 'dired-mark-extension
    "* /" 'dired-mark-directories)
#+end_src

*** Evaluate Elisp

#+begin_src emacs-lisp
;; Evaluate Elisp
(gato/leader-keys
  "e" '(:ignore t :wk "Evaluate")
  ;; Evaluate
  "e b" '(eval-buffer :wk "Evaluate Elisp in buffer")
  "e d" '(eval-defun :wk "Evaluate defun containing or after point")
  "e e" '(eval-expression :wk "Evaluate Elisp expression")
  "e l" '(eval-last-sexp :wk "Evaluate Elisp expression before point")
  "e r" '(eval-region :wk "Evaluate Elisp in region"))
#+end_src

*** Extended command (=M-x=)

#+begin_src emacs-lisp
  ;; Extended command
  (gato/leader-keys
    "SPC" '(execute-extended-command :wk "Execute extended command"))
#+end_src

*** Find files

#+begin_src emacs-lisp
;; Find files
  (gato/leader-keys
    "." '(find-file :wk "Find file")
    "f" '(:ignore t :wk "Find")
    "f c" '((lambda () (interactive) (find-file "~/.config/emacs/README.org")) :wk "Emacs configuration")
    "f r" '(recentf :wk "Recent files")
    "f u" '(sudo-edit-find-file :wk "Sudo find file")
    "f U" '(sudo-edit :wk "Sudo edit this file"))
#+end_src

*** Help

#+begin_src emacs-lisp
  ;; Help functions
  (gato/leader-keys
   "h" '(:ignore t :wk "Help")
   "h f" '(apropos-command :wk "Apropos command")
   "h f" '(describe-function :wk "Describe function")
   "h k" '(describe-key :wk "Describe key")
   "h m" '(describe-mode :wk "Describe mode")
   "h v" '(describe-variable :wk "Describe variable")
   "h x" '(describe-command :wk "Describe command")
   "h t" '(consult-theme :wk "Consult-theme")
   "h r" '((lambda () (interactive) (load-file user-init-file)) :wk "Reload Emacs config"))
#+end_src

*** Magit

#+begin_src emacs-lisp
;; Magit
(gato/leader-keys
 "g" '(:ignore t :wk "Magit")
 "g s" '(magit-status :wk "Status"))
#+end_src

*** Nov.el

#+begin_src emacs-lisp
  (general-define-key
    :states 'normal
    :keymaps 'nov-mode-map
    "J" 'nov-scroll-up
    "K" 'nov-scroll-down
    "t" 'nov-goto-toc
    "H" 'nov-previous-document
    "L" 'nov-next-document)
#+end_src

*** pdf-tools

#+begin_src emacs-lisp
(general-define-key
  :states 'normal
  :keymaps 'pdf-view-mode-map
  "j" 'pdf-view-next-line-or-next-page
  "k" 'pdf-view-previous-line-or-previous-page
  "r" 'pdf-view-themed-minor-mode
  "g g" 'pdf-view-first-page
  "G" 'pdf-view-last-page
  "g p" 'pdf-view-goto-page
  "=" 'pdf-view-enlarge
  "-" 'pdf-view-shrink)
#+end_src

*** Toggles

#+begin_src emacs-lisp
;; Toggle
  (gato/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t h" '(hl-line-mode :wk "Line highlight")
    "t l" '(display-line-numbers-mode :wk "Line numbers")
    "t o" '(olivetti-mode :wk "Olivetti")
    "t t" '(visual-line-mode :wk "Truncated lines"))
    ;; "t v" '(vterm-toggle :wk "Vterm"))

  ;; Toggle comments in normal and visual mode.
  (general-define-key
    :states '(normal)
    "g c c" '((lambda () (interactive)
        (comment-or-uncomment-region
          (line-beginning-position) (line-end-position)))
          :wk "Toggle comment"))

  (general-define-key
    :states '(visual)
    "g c" '(comment-or-uncomment-region :wk "Toggle comment"))
#+end_src

*** Typst

Compile, watch, and preview compiled =typst= documents.

#+begin_src emacs-lisp
  (gato/leader-keys
    :keymaps 'typst-ts-mode-map
    "p" '(:ignore t :wk "Typst")
    "p c" '(typst-ts-compile :wk "Compile")
    "p w" '(typst-ts-watch-mode :wk "Watch")
    "p o" '(typst-ts-mode-preview :wk "Open compiled document")
    "p p" '(typst-ts-compile-and-preview :wk "Compile and preview"))
#+end_src

*** Window manipulation

#+begin_src emacs-lisp
  ;; Windows
  (gato/leader-keys
    "w" '(:ignore t :wk "Windows")
    ;; Window splits
    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split")
    "w v" '(evil-window-vsplit :wk "Vertical split")
    ;; Window motions
    "w h" '(evil-window-left :wk "Window left")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "w w" '(evil-window-next :wk "Goto next window"))
    ;; Move windows
    ;;"w H" '(buf-move-left :wk "Buffer move left")
    ;;"w J" '(buf-move-down :wk "Buffer move down")
    ;;"w K" '(buf-move-up :wk "Buffer move up")
    ;;"w L" '(buf-move-right :wk "Buffer move right"))
#+end_src

*** End of keybindings

#+begin_src emacs-lisp
) ;; end of general.el keybindings
#+end_src

** Tools

Here we have a section for random small tools, that do not merit their own separate category.

*** Diff-hl

=diff-hl= highlights uncommitted changes in a buffer. [[*Diff-hl][Diff-hl keybindings]].

#+begin_src emacs-lisp
;; Diff-hl
(use-package diff-hl
  :defer t
  :hook
  (find-file . (lambda ()
               (global-diff-hl-mode)   ;; Enable Diff-HL mode for all files.
               (diff-hl-flydiff-mode)  ;; Automatically refresh diffs.
               (diff-hl-margin-mode))) ;; Show diff indicators in the margin.
  :custom
  (diff-hl-side 'left)                           ;; Set the side for diff indicators.
  (diff-hl-margin-symbols-alist '((insert . "│") ;; Customize symbols for each change type.
                                  (delete . "-")
                                  (change . "│")
                                  (unknown . "?")
                                  (ignored . "i"))))
#+end_src

*** Jinx

A fast JIT spell-checker for Emacs.

#+begin_src emacs-lisp
(use-package jinx
  :defer t
  :bind (("M-$" . jinx-correct)
         ("C-M-$" . jinx-languages))
  :config
  (setq jinx-languages "en_GB es fr it")
  :hook
  (elpaca-after-init . global-jinx-mode))
#+end_src

*** Magit

The Emacs git client. [[*Magit][Magit keybindings]].

#+begin_src emacs-lisp
;; Transient - Install updated version needed by Magit
(use-package transient
  :defer t)

;; Magit - Git client for Emacs
(use-package magit
  :after transient
  :defer t)
#+end_src

*** Nov.el

Major mode for reading EPUB documents. [[*Nov.el][Nov.el keybindings]].

#+begin_src emacs-lisp
(use-package nov
  :defer t

  :init
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))

  :config
  (setq nov-text-width t)
  (add-hook 'nov-mode-hook 'olivetti-mode))
#+end_src

*** Olivetti

A distraction-free writing environment. [[*Toggles][Olivetti keybindings]].

#+begin_src emacs-lisp
(use-package olivetti
  :defer t

  :config
  (setq olivetti-body-width 82))
#+end_src

*** pdf-tools

=pdf-tools= improves support of PDF files in Emacs using =poppler= instead of the native ~ghostscript~-based built-in DocView mode. It adds annotations, as well. [[*pdf-tools][pdf-tools keybindings]].

There is one problem, however — =pdf-tools= still lacks some basic stuff, like continuous page scrolling. The author/maintainer does not seem to be spending much time on it lately, and a [[https://github.com/vedang/pdf-tools/pull/224][PR adding "pdf roll"]] has been sitting on the GitHub repo, collecting dust, for over a year. I definitely want this feature, so we're installing the "pdf-roll" branch from this fork, instead of the regular release of =pdf-tools=. If/when the PR is merged and the official package updated, we will switch back to the official version.

#+begin_src emacs-lisp
(use-package pdf-tools
  :defer t
  :ensure (:type git :host github :repo "aikrahguzar/pdf-tools"
                 :branch "upstream-pdf-roll")
  :commands (pdf-loader-installer)
  :mode "\\.pdf\\'"
  :init (pdf-loader-install)
  :config
    (add-to-list 'revert-without-query ".pdf")
     )

(add-hook 'pdf-view-mode-hook #'(lambda () (interactive) (display-line-numbers-mode -1)
                                                         (pdf-view-themed-minor-mode t)
                                                         (pdf-view-roll-minor-mode)))
#+end_src

*** Rainbow delimiters

Colour-coded delimiters based on nesting depth.

#+begin_src emacs-lisp
;; Rainbow delimiters
(use-package rainbow-delimiters
  :defer t
  :ensure t
  :hook org-mode prog-mode)
#+end_src

*** Rainbowm mode

Colorise colour names and codes in buffers.

#+begin_src emacs-lisp
;; Rainbow mode
(use-package rainbow-mode
  :defer t
  :diminish
  :hook org-mode prog-mode)
#+end_src

*** Sudo-Edit

Edit files with =sudo= privileges. [[*Find files][Sudo-edit keybindings]]

#+begin_src emacs-lisp
;; Sudo-edit
(use-package sudo-edit
  :defer t)
#+end_src

*** Undo-tree

Don't particularly care about the tree, but persistent undo history is nice.

#+begin_src emacs-lisp
(use-package undo-tree
  :defer t
  :hook
  (elpaca-after-init . global-undo-tree-mode)
  :init
  (setq undo-tree-visualizer-timestamps t
        undo-tree-visualizer-diff t
        ;; Increase undo limits to avoid losing history due to Emacs' garbage collection.
        undo-limit 800000                     ;; Limit for undo entries.
        undo-strong-limit 12000000            ;; Strong limit for undo entries.
        undo-outer-limit 120000000)           ;; Outer limit for undo entries.
  :config
  (setq undo-tree-history-directory-alist '(("." . "~/.config/emacs/.cache/undo"))))
#+end_src

** Which-Key

=which-key= is an essetial tool for discoverability. So much so that it is probably going to be a built-in functionality in Emacs 30. For now, we install it as a regular package.

#+begin_src emacs-lisp
;; Which-Key - So many keys
(use-package which-key
  :defer t

  :config
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.5
        which-key-max-description-length nil
        which-key-allow-imprecise-window-fit nil
        which-key-separator "  ")

  :hook
  (elpaca-after-init . which-key-mode))
#+end_src

* LSP
:PROPERTIES:
:header-args: :tangle init.el
:END:

** Flycheck

#+begin_src emacs-lisp
;; Flycheck
(use-package flycheck
  :defer t
  :init (global-flycheck-mode))
#+end_src

** Treesit-auto

#+begin_src emacs-lisp
;; Treesit-auto
(use-package treesit-auto
  :after emacs
  :custom
  (treesit-auto-install 'prompt)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode t))
#+end_src

** LSP-mode

#+begin_src emacs-lisp
;;; LSP-mode
(use-package lsp-mode
  :defer t
  :hook (
         (bash-ts-mode . lsp)  ;; Bash
         (lua-mode . lsp)      ;; Lua
         (python-mode . lsp)   ;; Python
         (typst-ts-mode . lsp) ;; Typst
         (lsp-mode . lsp-enable-which-key-integration)) ;; Integrate with Which Key
  :commands lsp
  :custom
  (lsp-keymap-prefix "C-c l")                           ;; Set the prefix for LSP commands.
  (lsp-inlay-hint-enable t)                             ;; Enable inlay hints.
  (lsp-completion-provider :none)                       ;; Disable the default completion provider.
  (lsp-session-file (locate-user-emacs-file ".lsp-session")) ;; Specify session file location.
  (lsp-log-io nil)                                      ;; Disable IO logging for speed.
  (lsp-idle-delay 0)                                    ;; Set the delay for LSP to 0 (debouncing).
  (lsp-keep-workspace-alive nil)                        ;; Disable keeping the workspace alive.
  ;; Core settings
  (lsp-enable-xref t)                                   ;; Enable cross-references.
  (lsp-auto-configure t)                                ;; Automatically configure LSP.
  (lsp-enable-links nil)                                ;; Disable links.
  (lsp-eldoc-enable-hover t)                            ;; Enable ElDoc hover.
  (lsp-enable-file-watchers nil)                        ;; Disable file watchers.
  (lsp-enable-folding nil)                              ;; Disable folding.
  (lsp-enable-imenu t)                                  ;; Enable Imenu support.
  (lsp-enable-indentation nil)                          ;; Disable indentation.
  (lsp-enable-on-type-formatting nil)                   ;; Disable on-type formatting.
  (lsp-enable-suggest-server-download t)                ;; Enable server download suggestion.
  (lsp-enable-symbol-highlighting t)                    ;; Enable symbol highlighting.
  (lsp-enable-text-document-color nil)                  ;; Disable text document color.
  ;; Modeline settings
  (lsp-modeline-code-actions-enable nil)                ;; Keep modeline clean.
  (lsp-modeline-diagnostics-enable nil)                 ;; Use `flycheck' instead.
  (lsp-modeline-workspace-status-enable t)              ;; Display "LSP" in the modeline when enabled.
  (lsp-signature-doc-lines 1)                           ;; Limit echo area to one line.
  (lsp-eldoc-render-all nil)                            ;; Render all ElDoc messages.
  ;; Completion settings
  (lsp-completion-enable t)                             ;; Enable completion.
  (lsp-completion-enable-additional-text-edit t)        ;; Enable additional text edits for completions.
  (lsp-enable-snippet nil)                              ;; Disable snippets
  (lsp-completion-show-kind t)                          ;; Show kind in completions.
  ;; Headerline settings
  (lsp-headerline-breadcrumb-enable nil)                ;; Enable symbol numbers in the headerline.
  (lsp-headerline-breadcrumb-enable-symbol-numbers nil) ;; Enable symbol numbers in the headerline.
  (lsp-headerline-arrow "▶")                            ;; Set arrow for headerline.
  (lsp-headerline-breadcrumb-enable-diagnostics nil)    ;; Disable diagnostics in headerline.
  (lsp-headerline-breadcrumb-icons-enable nil)          ;; Disable icons in breadcrumb.
  ;; Semantic settings
  (lsp-semantic-tokens-enable nil))                     ;; Disable semantic tokens.
#+end_src

* Language support
:PROPERTIES:
:header-args: :tangle init.el
:END:

** Markdown

#+begin_src emacs-lisp
;; Markdown
(use-package markdown-mode
  :defer t
  :config
  (defvar nb/current-line '(0 . 0)
    "(start . end) of current line in current buffer")
  (make-variable-buffer-local 'nb/current-line)

  (defun nb/unhide-current-line (limit)
    "Font-lock function"
    (let ((start (max (point) (car nb/current-line)))
          (end (min limit (cdr nb/current-line))))
      (when (< start end)
        (remove-text-properties start end
                                '(invisible t display "" composition ""))
        (goto-char limit)
        t)))

  (defun nb/refontify-on-linemove ()
    "Post-command-hook"
    (let* ((start (line-beginning-position))
           (end (line-beginning-position 2))
           (needs-update (not (equal start (car nb/current-line)))))
      (setq nb/current-line (cons start end))
      (when needs-update
        (font-lock-fontify-block 3))))

  (defun nb/markdown-unhighlight ()
    "Enable markdown concealling"
    (interactive)
    (markdown-toggle-markup-hiding 'toggle)
    (font-lock-add-keywords nil '((nb/unhide-current-line)) t)
    (add-hook 'post-command-hook #'nb/refontify-on-linemove nil t))
  :custom-face
  (markdown-header-delimiter-face ((t (:height 0.9))))
  (markdown-header-face-1 ((t (:height 1.6  :weight extra-bold :inherit markdown-header-face))))
  (markdown-header-face-2 ((t (:height 1.4  :weight extra-bold :inherit markdown-header-face))))
  (markdown-header-face-3 ((t (:height 1.2  :weight extra-bold :inherit markdown-header-face))))
  (markdown-header-face-4 ((t (:height 1.15 :weight bold :inherit markdown-header-face))))
  (markdown-header-face-5 ((t (:height 1.1  :weight bold :inherit markdown-header-face))))
  (markdown-header-face-6 ((t (:height 1.05 :weight semi-bold :inherit markdown-header-face))))
  :hook
  (markdown-mode . abbrev-mode)
  (markdown-mode . variable-pitch-mode)
  (markdown-mode . nb/markdown-unhighlight))
#+end_src

** Lua

#+begin_src emacs-lisp
;; Lua
(use-package lua-mode
  :defer t)
#+end_src

** Typst

Add full support for =typst=, including syntax highlighting and lsp functionality. [[*Typst][Typst keybindings]].

Requires:

- ~typst-ts-mode~: typst treesitter major mode
  https://codeberg.org/meow_king/typst-ts-mode/

- ~tinymist~: language service for typst (binary should be in `'$PATH')
  https://github.com/Myriad-Dreamin/tinymist

Support enabled by following this:

- ~lsp-mode~: adding a new language
   https://emacs-lsp.github.io/lsp-mode/page/adding-new-language/

#+begin_src emacs-lisp
;; Typst support
(use-package typst-ts-mode
  :defer t
  :ensure (:type git :host codeberg :repo "meow_king/typst-ts-mode"
                 :files (:defaults "*.el"))
  :custom
  (typst-ts-watch-options "--open")
  (typst-ts-mode-grammar-location (expand-file-name "tree-sitter/libtree-sitter-typst.so" user-emacs-directory))
  (typst-ts-mode-enable-raw-blocks-highlight t)

  ;; Register `tinymist' as the Typst language server
  :config
  (with-eval-after-load 'lsp-mode
    (add-to-list 'lsp-language-id-configuration
                 '(typst-ts-mode . "typst"))

    (lsp-register-client
     (make-lsp-client :new-connection (lsp-stdio-connection "tinymist")
                      :activation-fn (lsp-activate-on "typst")
                      :server-id 'tinymist))))
#+end_src

** =init.el= footer

#+begin_src emacs-lisp
(provide 'init)

;;; init.el ends here
#+end_src
