#+TITLE: Emacs configuration
#+AUTHOR: Gatonegro
#+STARTUP: showeverything
#+OPTIONS: toc:3

* Table of Contents :toc:
- [[#early-init-file][~early-init~ file]]
- [[#begin-configel-file][Begin ~config.el~ file]]
  - [[#configel-header][~config.el~ header]]
- [[#package-management][Package management]]
  -  [[#elpaca][~Elpaca~]]
- [[#emacs][Emacs]]
  - [[#defaults][Defaults]]
  - [[#dired][Dired]]
  - [[#electric][Electric]]
  - [[#isearch][Isearch]]
  - [[#window-management][Window management]]
- [[#keybindings][Keybindings]]
  - [[#evil][Evil]]
  - [[#evil-collection][Evil Collection]]
  - [[#general][General]]
  - [[#which-key][Which-Key]]
- [[#org-mode][Org mode]]
- [[#tools][Tools]]
  - [[#buffer-moveel][buffer-move.el]]
  - [[#diminish][Diminish]]
  - [[#peep-dired][Peep-dired]]
  - [[#projectile][Projectile]]
  - [[#rainbow-mode][Rainbow mode]]
  - [[#sudo-edit][Sudo Edit]]
- [[#appearance][Appearance]]
  - [[#dashboard][Dashboard]]
  - [[#fonts][Fonts]]
  - [[#icons][Icons]]
  - [[#theme][Theme]]
  - [[#modeline][Modeline]]
  - [[#visual-fill-column][Visual fill column]]
- [[#version-control][Version Control]]
  - [[#diff-hl][Diff-hl]]
- [[#completion-frameworks][Completion frameworks]]
  - [[#ivy--counsel][Ivy / Counsel]]
  - [[#ivy-rich][Ivy-Rich]]
- [[#shells-and-terminals][Shells and terminals]]
  - [[#eshell][Eshell]]
  - [[#vterm-currently-disabled][Vterm (Currently disabled)]]
  - [[#vterm-toggle-currently-disabled][Vterm-Toggle (Currently disabled)]]
- [[#language-support][Language Support]]
  - [[#company][Company]]
  - [[#flycheck][Flycheck]]
  - [[#languages][Languages]]
  - [[#lsp-mode][LSP Mode]]
  - [[#typst][Typst]]
- [[#resources][Resources]]

* ~early-init~ file
:PROPERTIES:
:header-args: :tangle early-init.el
:END:

We will use ~elpaca~ as our package manager, so we need to add the following bit to ~early-init.el~ to prevent ~package.el~ from starting up, before the init file itself loads.

#+begin_src emacs-lisp
;;; early-init.el --- Early Init File -*- lexical-binding: t; no-byte-compile: t -*-

(setq package-enable-at-startup nil)
#+end_src

Set GUI transparency here, otherwise the Emacs client is almost invisible.

#+begin_src emacs-lisp
;; Set transparency
(set-frame-parameter (selected-frame) 'alpha '(100 . 100))
(add-to-list 'default-frame-alist '(alpha . (100 . 100)))
(set-frame-parameter nil 'alpha-background 90)
(add-to-list 'default-frame-alist '(alpha-background . 90))
#+end_src

Disable GUI elements before the window even shows up.

#+begin_src emacs-lisp
;; Minimal UI
(menu-bar-mode -1) ;; disable menu bar
(tool-bar-mode -1) ;; disable toolbar
(tooltip-mode -1) ;; disable tooltips
(scroll-bar-mode -1) ;; disable scrollbar
(pixel-scroll-precision-mode 1) ;; enable smooth scrolling

(setq inhibit-splash-screen t ;; disable splash screen
use-file-dialog nil ;; don't use system file dialog
tab-bar-new-button-show nil ;; don't show new tab button
tab-bar-close-button-show nil ;; don't show tab close button
tab-line-close-button-show nil) ;; don't show tab close button
;;; early-init.el ends here
#+end_src

* Begin ~config.el~ file
:PROPERTIES:
:header-args: :tangle config.el
:END:

** ~config.el~ header

#+begin_src emacs-lisp
;;; config.el --- Personal configuration file -*- lexical-binding: t; no-byte-compile: t; -*-
;; NOTE: config.el is now generated from config.org.
#+end_src

* Package management

**  ~Elpaca~

[[https://github.com/progfolio/elpaca][progfolio/elpaca: An Elisp package manager.]]

*** Bootstrap ~Elpaca~

[[https://github.com/progfolio/elpaca?tab=readme-ov-file][Bootstrap instructions.]]

#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.7)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
        :ref nil :depth 1
        :files (:defaults "elpaca-test.el" (:exclude "extensions"))
        :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
      (build (expand-file-name "elpaca/" elpaca-builds-directory))
      (order (cdr elpaca-order))
      (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
       (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
	           ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
					   ,@(when-let ((depth (plist-get order :depth)))
					       (list (format "--depth=%d" depth) "--no-single-branch"))
					   ,(plist-get order :repo) ,repo))))
	   ((zerop (call-process "git" nil buffer t "checkout"
				 (or (plist-get order :ref) "--"))))
	   (emacs (concat invocation-directory invocation-name))
	   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
				 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
	   ((require 'elpaca))
	   ((elpaca-generate-autoloads "elpaca" repo)))
      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
    (error "%s" (with-current-buffer buffer (buffer-string))))
((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+end_src

Enable ~use-package~ support for ~elpaca~, and ~:ensure~ packages by default.

#+begin_src emacs-lisp
(elpaca elpaca-use-package
  (elpaca-use-package-mode))
(setq use-package-always-ensure t)
#+end_src

* Emacs

** Defaults

[[https://idiomdrottning.org/bad-emacs-defaults][Bad Emacs defaults.]]

#+begin_src emacs-lisp
(use-package emacs
:ensure nil

:custom
(auto-save-default nil) ;; Disable automatic saving of buffers.
(use-short-answers t) ;; Use short answers in prompts
(use-dialog-box nil) ;; Disable dialog boxes in favor of minibuffer prompts.
(delete-selection-mode 1) ;; Enable replacing selected text with typed text.
(display-line-numbers-type 'relative) ;; Use relative line numbering in programming modes.
(global-auto-revert-non-file-buffers t) ;; Automatically refresh non-file buffers.
(split-width-threshold 300) ;; Prevent window splitting if the window width exceeds 300 pixels.
(ispell-dictionary "en_GB") ;; Set the default dictionary for spell checking.
(column-number-mode t) ;; Display the column number in the mode line.
(tab-always-indent 'complete) ;; Make the TAB key complete text instead of just indenting.
(tab-width 4) ;; Set the tab width to 4 spaces.

;:hook
;(prog-mode . display-line-numbers-mode) ;; Enable line numbers in programming modes.

:config
;; Make sure ] b and [ b will always load a file buffer.
(defun skip-these-buffers (_window buffer _bury-or-kill)
"Function for `switch-to-prev-buffer-skip'."
(string-match "\\*[^*]+\\*" (buffer-name buffer)))
(setq switch-to-prev-buffer-skip 'skip-these-buffers)

;; Custom file
(setq custom-file (locate-user-emacs-file "custom-vars.el")) ;; Specify the custom file path.
(load custom-file 'noerror 'nomessage) ;; Load the custom file quietly, ignoring errors.

:init
(setq enable-recursive-minibuffers t)
(setq backup-by-copying t)
(setq sentence-end-double-space nil)
(setq frame-inhibit-implied-resize t) ;; useless for a tiling window manager
(setq show-trailing-whitespace t) ;; self-explanatory

(setq indent-tabs-mode nil) ;; no tabs

;; keep backup and save files in a dedicated directory
(setq backup-directory-alist
  `((".*" . ,(concat user-emacs-directory "backups")))
  auto-save-file-name-transforms
  `((".*" ,(concat user-emacs-directory "backups") t)))

(setq create-lockfiles nil) ;; no need to create lockfiles

(set-charset-priority 'unicode) ;; utf8 everywhere
(setq locale-coding-system 'utf-8
      coding-system-for-read 'utf-8
      coding-system-for-write 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))

(global-set-key (kbd "<escape>") 'keyboard-escape-quit) ;; escape quits everything

;; less noise when compiling elisp
(setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
(setq native-comp-async-report-warnings-errors nil)
(setq load-prefer-newer t)

(show-paren-mode t)

;; Hide commands in M-x which don't work in the current mode
(setq read-extended-command-predicate #'command-completion-default-include-p))

(global-hl-line-mode 0)              ;; Enable highlight of the current line
(global-display-line-numbers-mode 1) ;; Display line-numbers mode globally.
(global-visual-line-mode t)          ;; Visual-Line mode in all buffers.
(global-auto-revert-mode 1)          ;; Enable global auto-revert mode.
(recentf-mode 1)                     ;; Enable tracking of recently opened files.
(savehist-mode 1)                    ;; Enable saving of command history.
(save-place-mode 1)                  ;; Enable saving the place in files for easier return.
(winner-mode)                        ;; Enable winner mode to easily undo window config changes.
(xterm-mouse-mode 1)                 ;; Enable mouse support in terminal mode.
(file-name-shadow-mode 1)            ;; Enable shadowing of filenames for clarity.
#+end_src

Disable line numbers in certain modes.

#+begin_src emacs-lisp
(dolist (mode 
         '(org-mode-hook
           term-mode-hook
           shell-mode-hook
           eshell-mode-hook
           dashboard-mode-hook
           typst-ts-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Dired

#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :custom
  (dired-listing-switches "-lah --group-directories-first")  ;; Display files in a human-readable format and group directories first.
  (dired-dwim-target t)                                      ;; Enable "do what I mean" for target directories.
  (dired-guess-shell-alist-user
   '((".*" "open" "xdg-open")))                              ;; Open files with default application.
  (dired-kill-when-opening-new-dired-buffer t)               ;; Close the previous buffer when opening a new `dired' instance.
)
#+end_src

** Electric

#+begin_src emacs-lisp
(use-package electric
  :ensure nil
  :init
  (electric-pair-mode +1) ;; automatically insert closing parens
  (electric-indent-mode -1) ;; weird and inconsistent as hell, go away
  (setq electric-pair-preserve-balance t
        org-edit-src-content-indentation 0))
#+end_src

** Isearch

Configure Emacs' incremental search.

#+begin_src emacs-lisp
(use-package isearch
  :ensure nil
  :config
  (setq isearch-lazy-count t ;; Enable lazy counting to show current match information.
        lazy-count-prefix-format "(%s/%s) " ;; Format for displaying current match count.
        lazy-count-suffix-format nil ;; Disable suffix formatting for match count.
        search-whitespace-regexp ".*?")) ;; Allow searching across whitespace.
#+end_src

** Window management

Improved buffer/window management.

#+begin_src emacs-lisp
(use-package window
  :ensure nil
  :custom
  (display-buffer-alist
   '(
     ("\\*\\(Backtrace\\|Warnings\\|Compile-Log\\|[Hh]elp\\|Messages\\|Bookmark List\\|Ibuffer\\|Occur\\|eldoc.*\\)\\*"
      (display-buffer-in-side-window)
      (window-height . 0.25)
      (side . bottom)
      (slot . 0))

     ;; Example configuration for the LSP help buffer,
     ;; keeps it always on bottom using 25% of the available space:
     ("\\*\\(lsp-help\\)\\*"
      (display-buffer-in-side-window)
      (window-height . 0.25)
      (side . bottom)
      (slot . 0))
     ;; Configuration for displaying various diagnostic buffers on
     ;; bottom 25%:
     ("\\*\\(Flycheck error messages\\|xref\\|ivy\\|Swiper\\|Completions\\)"
      (display-buffer-in-side-window)
      (window-height . 0.25)
      (side . bottom)
      (slot . 1))
   )))
#+end_src

* Keybindings

** Evil

[[https://github.com/emacs-evil/evil][emacs-evil/evil: The extensible vi layer for Emacs.]]

#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t
    evil-want-keybinding nil
    evil-vsplit-window-right t
    evil-split-window-below t
    evil-respect-visual-line-mode t)
  (evil-mode))
#+end_src

** Evil Collection

[[https://github.com/emacs-evil/evil-collection][A set of keybindings for evil-mode.]]

#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :init
  (setq evil-collection-mode-list nil)
  (add-to-list 'evil-collection-mode-list 'dashboard)
  (add-to-list 'evil-collection-mode-list 'dired)
  (add-to-list 'evil-collection-mode-list 'ibuffer)
  (add-to-list 'evil-collection-mode-list 'magit)
  (add-to-list 'evil-collection-mode-list '(pdf pdf-view))
  :config
  (evil-collection-init))
#+end_src

** General

[[https://github.com/noctuid/general.el][noctuid/general.el: More convenient key definitions in emacs]]

*** General setup

#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup) ;; integrate general with evil
#+end_src

*** Leader keys

#+begin_src emacs-lisp
  ;; set up 'SPC' as the global leader key
  (general-create-definer gato/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode

  ;; set up ',' as the local leader key
  (general-create-definer gato/local-leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "," ;; set local leader
    :global-prefix "M-,") ;; access local leader in insert mode
#+end_src

*** Buffers

#+begin_src emacs-lisp
  ;; Buffers
  (gato/leader-keys
    "b" '(:ignore t :wk "Buffer")
    "b b" '(switch-to-buffer :wk "Switch buffer")
    "b i" '(ibuffer :wk "Ibuffer")
    "b k" '(kill-this-buffer :wk "Kill current buffer")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Revert buffer"))
#+end_src

*** Counsel

#+begin_src emacs-lisp
  ;; Counsel
  (gato/leader-keys
    "SPC" '(counsel-M-x :wk "Counsel M-x"))
#+end_src

*** Diff-hl

#+begin_src emacs-lisp
  ;; Diff-hl
  (general-define-key
    :states '(normal)
    "] c" '(diff-hl-next-hunk :wk "Next diff hunk")
    "[ c" '(diff-hl-previous-hunk :wk "Previous diff hunk"))
#+end_src

*** Eshell / Evaluate Elisp

#+begin_src emacs-lisp
  ;; Eshell / Evaluate Elisp
  (gato/leader-keys
    "e" '(:ignore t :wk "Eshell / Evaluate")
    ;; Evaluate
    "e b" '(eval-buffer :wk "Evaluate Elisp in buffer")
    "e d" '(eval-defun :wk "Evaluate defun containing or after point")
    "e e" '(eval-expression :wk "Evaluate Elisp expression")
    "e l" '(eval-last-sexp :wk "Evaluate Elisp expression before point")
    "e r" '(eval-region :wk "Evaluate Elisp in region")
    ;; Eshell
    "e s" '(eshell :wk "Eshell")
    "e h" '(counsel-esh-history :wk "Evaluate Elisp in region"))
#+end_src

*** Find files

#+begin_src emacs-lisp
  ;; Find files
  (gato/leader-keys
    "." '(find-file :wk "Find file")
    "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit Emacs config")
    "f r" '(counsel-recentf :wk "Find recent files"))
#+end_src

*** Help

#+begin_src emacs-lisp
  ;; Help functions
  (gato/leader-keys
   "h" '(:ignore t :wk "Help")
   "h f" '(describe-function :wk "Describe function")
   "h t" '(load-theme :wk "Load theme")
   "h v" '(describe-variable :wk "Describe variable")
   "h r" '((lambda () (interactive) (load-file user-init-file)) :wk "Reload Emacs config")
  )
#+end_src

*** Org mode

#+begin_src emacs-lisp
  ;; Org mode
  (gato/leader-keys
    "m" '(:ignore t :wk "Org")
    "m a" '(org-agenda :wk "Org agenda")
    "m e" '(org-export-dispatch :wk "Org export dispatch")
    "m i" '(org-toggle-item :wk "Org toggle item")
    "m t" '(org-todo :wk "Org todo")
    "m B" '(org-babel-tangle :wk "Org babel tangle")
    "m T" '(org-todo-list :wk "Org todo list"))

  (gato/leader-keys
    "m b" '(:ignore t :wk "Tables")
    "m b -" '(org-table-insert-hline :wk "Insert hline in table"))

  (gato/leader-keys
    "m d" '(:ignore t :wk "Date/deadline")
    "m d t" '(org-time-stamp :wk "Org time stamp"))
#+end_src

*** Toggle

#+begin_src emacs-lisp
  ;; Toggle
  (gato/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t c" '(visual-line-fill-column-mode :wk "Toggle fill column")
    "t h" '(hl-line-mode :wk "Toggle line highlight")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t t" '(visual-line-mode :wk "Toggle truncated lines")
    "t v" '(vterm-toggle :wk "Toggle vterm"))

  ;; Toggle comments in normal and visual mode.
  (general-define-key
    :states '(normal)
    "g c c" '((lambda () (interactive)
        (comment-or-uncomment-region
          (line-beginning-position) (line-end-position)))
          :wk "Toggle comment"))

  (general-define-key
    :states '(visual)
    "g c" '(comment-or-uncomment-region :wk "Toggle comment"))
#+end_src

*** Projectile

#+begin_src emacs-lisp
  ;; Projectile
  (gato/leader-keys
    "j" '(projectile-command-map :wk "Projectile"))
#+end_src

*** Typst

#+begin_src emacs-lisp
  ;; Typst
  (gato/leader-keys
    :keymaps 'typst-ts-mode-map
    "p" '(:ignore t :wk "Typst")
    "p c" '(typst-ts-compile :wk "Compile")
    "p w" '(typst-ts-watch-mode :wk "Watch")
    "p o" '(typst-ts-mode-preview :wk "Open compiled document")
    "p p" '(typst-ts-compile-and-preview :wk "Compile and preview"))
#+end_src

*** Window manipulation

#+begin_src emacs-lisp
  ;; Windows
  (gato/leader-keys
    "w" '(:ignore t :wk "Windows")
    ;; Window splits
    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split")
    "w v" '(evil-window-vsplit :wk "Vertical split")
    ;; Window motions
    "w h" '(evil-window-left :wk "Window left")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "w w" '(evil-window-next :wk "Goto next window")
    ;; Move windows
    "w H" '(buf-move-left :wk "Buffer move left")
    "w J" '(buf-move-down :wk "Buffer move down")
    "w K" '(buf-move-up :wk "Buffer move up")
    "w L" '(buf-move-right :wk "Buffer move right"))
#+end_src

*** Zoom text

#+begin_src emacs-lisp
  ;; Zoom in/out
  (general-define-key
    "M-+" '(text-scale-increase :wk "Increase text scale")
    "M-_" '(text-scale-decrease :wk "Decrease text scale"))
#+end_src

*** End General config

#+begin_src emacs-lisp
;; end General keybindings
)
#+end_src

** Which-Key

[[https://github.com/justbur/emacs-which-key][justbur/emacs-which-key: Emacs package that displays available keybindings in popup]]

*ARCHIVE NOTE:* ~which-key~ is now in the master branch of Emacs and will likely be released with Emacs v30. At that point, the configuration here will need to be adjusted. For now, we load it as an external package.

#+begin_src emacs-lisp
(use-package which-key
:diminish
:after evil
:init
  (which-key-mode 1)
:config
(setq which-key-side-window-location 'bottom
      which-key-sort-order #'which-key-key-order-alpha
      which-key-sort-uppercase-first nil
      which-key-add-column-padding 1
      which-key-max-display-columns nil
      which-key-min-display-lines 6
      which-key-side-window-slot -10
      which-key-side-window-max-height 0.25
      which-key-idle-delay 0.5
      which-key-max-description-length nil
      which-key-allow-imprecise-window-fit nil
      which-key-separator "  "))
#+end_src

* Org mode

#+begin_src emacs-lisp
(use-package org
  :ensure nil
  :init
  ;; edit settings (recommended by org-modern)
  (setq org-auto-align-tags nil
	      org-tags-column 0
	      org-catch-invisible-edits 'show-and-error
	      org-special-ctrl-a/e t ;; special navigation behaviour in headlines
	      org-insert-heading-respect-content t)

  ;; styling, hide markup, etc. (recommended by org-modern)
  (setq org-hide-emphasis-markers t
	      org-src-fontify-natively t ;; fontify source blocks natively
	      org-highlight-latex-and-related '(native) ;; fontify latex blocks natively
	      org-pretty-entities t)

  ;; agenda styling (recommended by org-modern)
  (setq org-agenda-tags-column 0
	      org-agenda-block-separator ?─
	      org-agenda-time-grid
	      '((daily today require-timed)
	        (800 1000 1200 1400 1600 1800 2000)
	        " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
	      org-agenda-current-time-string
	      "⭠ now ─────────────────────────────────────────────────")

  (setq org-ellipsis "..."))
#+end_src

Enable the ~org-tempo~ module.

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

Enable table of contents.

#+begin_src emacs-lisp
(use-package toc-org
  :after org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

Enable bullets.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets
  :after org)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

* Tools

** buffer-move.el

[[https://emacswiki.org/emacs/buffer-move.el][buffer-move.el]] provides functions for swapping buffer positions.

#+begin_src emacs-lisp
(require 'windmove)

;;;###autoload
(defun buf-move-up ()
"Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win)
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
"Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
#+end_src

** Diminish

#+begin_src emacs-lisp
(use-package diminish)
#+end_src

** Peep-dired

[[[https://github.com/asok/peep-dired?tab=readme-ov-file][asok/peep-dired: A convenient way to look up file contents in other window while browsing directory in dired.]]

#+begin_src emacs-lisp
(use-package dired-preview
  :after dired
  :hook (evil-normalize-keymaps . peep-dired-hook)
  :config
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file))
#+end_src

** Projectile

[[https://github.com/bbatsov/projectile][bbatsov/projectile: Project interaction library for Emacs.]]

#+begin_src emacs-lisp
(use-package projectile
  :config
  (projectile-mode 1))
#+end_src

** Rainbow mode

[[https://elpa.gnu.org/packages/rainbow-mode.html][rainbow-mode: Colorise colour names in buffers.]]

#+begin_src emacs-lisp
(use-package rainbow-mode
  :diminish
  :hook org-mode prog-mode)
#+end_src

** Sudo Edit

[[https://github.com/nflath/sudo-edit][nflath/sudo-edit: Utilities for opening files with sudo.]]

#+begin_src emacs-lisp
(use-package sudo-edit
  :config
    (gato/leader-keys
      "fu" '(sudo-edit-find-file :wk "Sudo find file")
      "fU" '(sudo-edit :wk "Sudo edit this file")))
#+end_src

* Appearance

** Dashboard

[[https://github.com/emacs-dashboard/emacs-dashboard][emacs-dashboard/emacs-dashboard:  An extensible emacs dashboard]]

#+begin_src emacs-lisp
(use-package dashboard
  :init
  (setq initial-buffer-choice 'dashboard-open
        dashboard-set-heading-icons t
        dashboard-set-file-icons t
        dashboard-banner-logo-title "«Objects such as corpses, painful to view in themselves, can become delightful to contemplate.»"
  ;;      dashboard-startup-banner 'logo ;; use standard emacs logo as banner
        dashboard-startup-banner (concat user-emacs-directory "themes/gatonegro.png")
        dashboard-projects-backend 'projectile
        dashboard-center-content t ;; set to 't' for centered content
        dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (projects . 3)
                          (registers . 3)))
  :custom
  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (bookmarks . "book")))
  :config
  (dashboard-setup-startup-hook))
#+end_src

** Fonts

#+begin_src emacs-lisp
; Define default, variable pitch, and fixed pitch fonts.
(set-face-attribute 'default nil
  :font "monospace"
  :height 100)
(set-face-attribute 'variable-pitch nil
  :font "sans-serif"
  :height 100
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "monospace"
  :height 100)

;; Display commented text and keywords in italics.
;; Requires a font with italics support.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; Adjust line spacing.
(setq-default line-spacing 0.15)
#+end_src

** Icons

[[https://github.com/domtronn/all-the-icons.el][domtronn/all-the-icons.el: Utility package to use various icon fonts within Emacs.]]

#+begin_src emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p))
#+end_src

[[https://github.com/jtbm37/all-the-icons-dired][jtbm37/all-the-icons-dired: Adds dired support to all-the-icons]]

#+begin_src emacs-lisp
(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

** Theme

[[https://github.com/doomemacs/themes][doomemacs/themes: A megapack of themes for GNU Emacs.]]

#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path (concat user-emacs-directory "themes"))
(use-package doom-themes
  :custom
  (doom-themes-enable-bold t)
  (doom-themes-enable-italic t)
  :config
  (load-theme 'doom-gatonegro t)
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
  ;; Must be used *after* the theme is loaded
  ;; (custom-set-faces '(default ((t (:background "#0a0a15")))))
  ;; (setq doom-tokyo-night-brighter-comments t
  ;;       doom-tokyo-night-brighter-modeline t))
#+end_src

For a custom theme, use this instead:

#+begin_src emacs-lisp :tangle nil
(add-to-list 'custom-theme-load-path (concat user-emacs-directory "themes"))
(load-theme 'theme-name t)
#+end_src

** Modeline

[[https://github.com/seagle0128/doom-modeline][seagle0128/doom-modeline: A fancy and fast mode-line inspired by minimalist design.]]

#+begin_src emacs-lisp
(use-package doom-modeline
  :custom
  (doom-modeline-buffer-file-name-style 'buffer-name) ;; Set buffer style filename only.
  (doom-modeline-project-detection 'project) ;; Enable project detection.
  (doom-modeline-buffer-name t) ;; Show the buffer name in the mode line.
  (doom-modeline-vcs-max-length 25) ;; Limit the VCS branch name 25 characters.
  :config
  (setq doom-modeline-icon t) ;; Enable icons.
  (doom-modeline-mode))
#+end_src

** Visual fill column

[[https://codeberg.org/joostkremers/visual-fill-column][joostkremers/visual-fill-column: Emacs mode for wrapping visual-line-mode buffers at fill-column.]]

#+begin_src emacs-lisp
(use-package visual-fill-column
  :custom
  (visual-fill-column-width 80)
  (visual-fill-column-adjust-for-text-scale nil)
  :config
  (setq-default visual-fill-column-center-text t))
#+end_src

* Version Control

** Diff-hl

#+begin_src emacs-lisp
(use-package diff-hl
  :defer t
  :hook
  (find-file . (lambda ()
               (global-diff-hl-mode)   ;; Enable Diff-HL mode for all files.
               (diff-hl-flydiff-mode)  ;; Automatically refresh diffs.
               (diff-hl-margin-mode))) ;; Show diff indicators in the margin.
  :custom
  (diff-hl-side 'left)                           ;; Set the side for diff indicators.
  (diff-hl-margin-symbols-alist '((insert . "│") ;; Customize symbols for each change type.
                                  (delete . "-")
                                  (change . "│")
                                  (unknown . "?")
                                  (ignored . "i"))))
#+end_src

* Completion frameworks

** Ivy / Counsel

[[https://github.com/abo-abo/swiper][abo-abo/swiper: Ivy - a generic completion frontend for Emacs.]]

#+begin_src emacs-lisp
(use-package ivy
  :diminish)

(use-package counsel
  :diminish
  :bind (("C-s" . swiper)
         ("C-x C-f" . counsel-find-file)
         ("C-x b" . counsel-ibuffer)
         ("C-r" . counsel-minibuffer-history)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :custom
  (setq ivy-use-virtual-buffers t
        ivy-count-format "(%d/%d) "
        enable-recursive-minibuffers t)
  :config
    (ivy-mode)
    (counsel-mode))
#+end_src

** Ivy-Rich

[[https://github.com/seagle0128/all-the-icons-ivy-rich][seagle0128/all-the-icons-ivy-rich: Better experience with icons for ivy.]]

#+begin_src emacs-lisp
(use-package all-the-icons-ivy-rich
  :init (all-the-icons-ivy-rich-mode 1))
#+end_src

[[https://github.com/Yevgnen/ivy-rich][Yevgnen/ivy-rich: More friendly interface for ivy.]]

#+begin_src emacs-lisp
(use-package ivy-rich
  :after ivy
  :init (ivy-rich-mode 1)
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev))
  ;:config
  ;(ivy-set-display-transformer 'ivy-switch-buffer
  ;                             'ivy-rich-switch-buffer-transformer))
#+end_src

* Shells and terminals

** Eshell

Eshell is an Emacs 'shell' writtein in Elisp.

#+begin_src emacs-lisp
(use-package eshell-syntax-highlighting
  :after esh-mode
  :config
  (eshell-syntax-highlighting-global-mode +1))

(setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
      eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands '("bash" "btop" "ssh" "zsh"))
#+end_src

** Vterm (Currently disabled)

A terminal emulator within Emacs.

#+begin_src emacs-lisp :tangle nil
(use-package vterm
  :config
  (setq shell-file-name "/bin/zsh"
        vterm-max-scrollback 5000))
#+end_src

** Vterm-Toggle (Currently disabled)

Currently disabled, because I can't think of an actual use case. Toggle between the Vterm buffer and the previous active buffer.

#+begin_src emacs-lisp :tangle nil
(use-package vterm-toggle
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  (reusable-frames . visible)
                  (window-height . 0.3))))
#+end_src

* Language Support

** Company

[[https://github.com/company-mode/company-mode][company-mode/company-mode: Modular in-buffer completion framework for Emacs.]]

#+begin_src emacs-lisp
(use-package company
  :defer 2
  :diminish
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-show-numbes t)
  (company-tooltip-align-annotations t)
  (global-company-mode t))
#+end_src

Company box

#+begin_src emacs-lisp
(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode))
#+end_src

** Flycheck

[[https://flycheck.org/en/latest/][Flycheck: Syntax checking for GNU Emacs.]]

#+begin_src emacs-lisp
(use-package flycheck
  :defer t
  :diminish
  :init (global-flycheck-mode))
#+end_src

** Languages

#+begin_src emacs-lisp
;; Lua
(use-package lua-mode)
;; Markdown
(use-package markdown-mode
  :init (setq markdown-command "multimarkdown"))
#+end_src

** LSP Mode

[[https://github.com/emacs-lsp/lsp-mode][emacs-lsp/lsp-mode: Emacs client/library for the Language Server Protocol.]]

This section has been lifted essentially in full from [[https://github.com/LionyxML/emacs-kick][emacs-kick]].

#+begin_src emacs-lisp
(use-package lsp-mode
  :defer t
  :hook (;; Enable LSP for the following languages
         (bash-ts-mode . lsp)  ;; Bash
         (lua-mode . lsp)      ;; Lua
         (python-mode . lsp)   ;; Python
         (typst-ts-mode . lsp) ;; Typst
         (lsp-mode . lsp-enable-which-key-integration)) ;; Integrate with which-key
  :commands lsp
  :custom
  (lsp-keymap-prefix "C-c l")                           ;; Set the prefix for LSP commands.
  (lsp-inlay-hint-enable t)                             ;; Enable inlay hints.
  (lsp-completion-provider :none)                       ;; Disable the default completion provider.
  (lsp-session-file (locate-user-emacs-file ".lsp-session")) ;; Specify session file location.
  (lsp-log-io nil)                                      ;; Disable IO logging for speed.
  (lsp-idle-delay 0)                                    ;; Set the delay for LSP to 0 (debouncing).
  (lsp-keep-workspace-alive nil)                        ;; Disable keeping the workspace alive.
  ;; Core settings
  (lsp-enable-xref t)                                   ;; Enable cross-references.
  (lsp-auto-configure t)                                ;; Automatically configure LSP.
  (lsp-enable-links nil)                                ;; Disable links.
  (lsp-eldoc-enable-hover t)                            ;; Enable ElDoc hover.
  (lsp-enable-file-watchers nil)                        ;; Disable file watchers.
  (lsp-enable-folding nil)                              ;; Disable folding.
  (lsp-enable-imenu t)                                  ;; Enable Imenu support.
  (lsp-enable-indentation nil)                          ;; Disable indentation.
  (lsp-enable-on-type-formatting nil)                   ;; Disable on-type formatting.
  (lsp-enable-suggest-server-download t)                ;; Enable server download suggestion.
  (lsp-enable-symbol-highlighting t)                    ;; Enable symbol highlighting.
  (lsp-enable-text-document-color nil)                  ;; Disable text document color.
  ;; Modeline settings
  (lsp-modeline-code-actions-enable nil)                ;; Keep modeline clean.
  (lsp-modeline-diagnostics-enable nil)                 ;; Use `flycheck' instead.
  (lsp-modeline-workspace-status-enable t)              ;; Display "LSP" in the modeline when enabled.
  (lsp-signature-doc-lines 1)                           ;; Limit echo area to one line.
  (lsp-eldoc-render-all nil)                            ;; Render all ElDoc messages.
  ;; Completion settings
  (lsp-completion-enable t)                             ;; Enable completion.
  (lsp-completion-enable-additional-text-edit t)        ;; Enable additional text edits for completions.
  (lsp-enable-snippet nil)                              ;; Disable snippets
  (lsp-completion-show-kind t)                          ;; Show kind in completions.
  ;; Headerline settings
  (lsp-headerline-breadcrumb-enable-symbol-numbers t)   ;; Enable symbol numbers in the headerline.
  (lsp-headerline-arrow "▶")                            ;; Set arrow for headerline.
  (lsp-headerline-breadcrumb-enable-diagnostics nil)    ;; Disable diagnostics in headerline.
  (lsp-headerline-breadcrumb-icons-enable nil)          ;; Disable icons in breadcrumb.
  ;; Semantic settings
  (lsp-semantic-tokens-enable nil))                     ;; Disable semantic tokens.

#+end_src

** Typst

Add full support for [[https://typst.app/][Typst]], including syntax highlighting and LSP functionality.

- [[https://codeberg.org/meow_king/typst-ts-mode/wiki/Installation.md][meow​_king/typst-ts-mode]] - Typst treesitter major mode for Emacs. Provides syntax highlighting, keybindings for common tasks.

- [[https://github.com/Myriad-Dreamin/tinymist][Myriad-Dreamin/tinymist]] - Integrated language service for Typst. The ~tinymist~ binary should be in ~PATH~.

- [[https://emacs-lsp.github.io/lsp-mode/page/adding-new-language/][lsp-mode: Adding new language]] - Register ~tinymist~ as the language server in ~lsp-mode~.

#+begin_src emacs-lisp
(use-package typst-ts-mode
  :ensure (:type git :host codeberg :repo "meow_king/typst-ts-mode"
                 :files (:defaults "*.el"))
  :custom
  (typst-ts-watch-options "--open")
  (typst-ts-mode-grammar-location (expand-file-name "tree-sitter/libtree-sitter-typst.so" user-emacs-directory))
  (typst-ts-mode-enable-raw-blocks-highlight t)

  ;; Register `tinymist' as the Typst language server
  :config
  (with-eval-after-load 'lsp-mode
    (add-to-list 'lsp-language-id-configuration
                 '(typst-ts-mode . "typst"))
  
    (lsp-register-client
     (make-lsp-client :new-connection (lsp-stdio-connection "tinymist")
                      :activation-fn (lsp-activate-on "typst")
                      :server-id 'tinymist)))
  )
#+end_src

* Resources

- [[https://www.youtube.com/playlist?list=PL5--8gKSku15e8lXf7aLICFmAHQVo0KXX][DistroTube - Configuring Emacs]] - The main source of this config.

- [[https://github.com/patrl/emacs.d/blob/main/readme.org][patrl/emacs.d]] - More advanced example of a literate config.

- [[https://github.com/LionyxML/emacs-kick][LionyxML/emacs-kick]] - Inspiration for some of the settings.
