# vim:ft=conf
# ----------------------------------------------------------------------------
# lfrc - lf terminal file manager
# gatoneg.ro
# ----------------------------------------------------------------------------

# set window name on cd
cmd on-cd &{{ 
	printf "\033]0; $(pwd) - lf\007" > /dev/tty 
}}
on-cd

set shell zsh
set shellopts '-euy'
set ifs "\n"

# basic settings
# set hidden
set icons
set ignorecase
set scrolloff 10
set ratios 1:1
set info size
set dircounts
set tabstop 4

# file previews
set previewer ~/.config/lf/preview
set cleaner ~/.config/lf/clear
set preview

# custom commands
cmd mkdir %mkdir "$@"
cmd touch %touch "$@"

# extract contents of archive
cmd extract ${{
  case "$f" in
	*.tar.bz2)   tar xjf "$f"   ;;
	*.tar.gz)    tar xzf "$f"   ;;
	*.bz2)       bunzip2 "$f"   ;;
	*.rar)       unrar x "$f"   ;;
	*.gz)        gunzip "$f"    ;;
	*.tar)       tar xf  "$f"    ;;
	*.tbz2)      tar xjf "$f"   ;;
	*.tgz)       tar xzf "$f"   ;;
	*.zip)       unzip "$f"     ;;
	*.Z)         uncompress "$f";;
	*.7z)        7z x "$f"      ;;
	*.deb)       ar x "$f"      ;;
	*.tar.xz)    tar xf "$f"    ;;
	*.tar.zst)   tar xf "$f"    ;;
	*)           echo "'$f' cannot be extracted via ex()" ;;
  esac
}}

# open text files in $EDITOR and xdg-open for everything else
cmd open &{{
	case $(file --mime-type -Lb $f) in
		text/*) lf -remote "send $id \$$EDITOR \$fx";;
		image/*) imgview $fx;;
		video/*) umpv $fx;;
		*) xdg-open $fx;;
	esac
}}

# bulk rename
cmd bulkrename ${{
	old="$(mktemp)"
	new="$(mktemp)"
	if [ -n "$fs" ]; then
		fs="$(basename -a $fs)"
	else
		fs="$(ls)"
	fi
	printf '%s\n' "$fs" >"$old"
	printf '%s\n' "$fs" >"$new"
	$EDITOR "$new"
	[ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
	paste "$old" "$new" | while IFS= read -r names; do
		src="$(printf '%s' "$names" | cut -f1)"
		dst="$(printf '%s' "$names" | cut -f2)"
		if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
			continue
		fi
		mv -- "$src" "$dst"
	done
	rm -- "$old" "$new"
	lf -remote "send $id unselect"
}}

# make sure trash folder exists
%mkdir -p ~/.local/share/Trash/files
# go to trash
map gt cd ~/.local/share/Trash/files
# move current file or selected files to trash folder
cmd trash %set -f; mv --backup=numbered $fx ~/.local/share/Trash/files

# delete files with prompt
cmd delete ${{
	set -f
	prompt="Delete? [y/N] "
	clear; tput cup $((($(tput lines)-2)/2)) 0; tput bold
	printf "%*s\n" $((($(tput cols)+${#fx})/2)) "$fx"
	printf "%*s" $((($(tput cols)+${#prompt})/2)) "$prompt"
	read ans
	[ $ans = "y" ] && rm -rf -- $fx
}}

# shell but with output shown
cmd shellcmd ${{
	printf "Shell command: \n"
	read ans
	$ans
	printf "\n"
	printf "press <enter> key to continue\n"
	read ans
}}

# symlinks
cmd follow_link %{{
  lf -remote "send ${id} select '$(readlink $f)'"
}}

cmd link %{{
	set -- $(cat ~/.local/share/lf/files)
	mode="$1"
	shift
	if [ "$#" -lt 1 ]; then
		lf -remote "send $id echo no files to link"
		exit 0
	fi
	case "$mode" in
		# symbolically copy mode is indicating a soft link
		copy) ln -sr -t . -- "$@";;
		# while a move mode is indicating a hard link
		move) ln -t . -- "$@";;
	esac
	rm ~/.local/share/lf/files
	lf -remote "send clear"
}}

cmd pdfcat %{{
	printf "File name: "
	read name
	pdftk $fx cat output "$name".pdf
}}

# find files with fzf
cmd fzf_jump ${{
	dirs="$(fzf --header='Jump to:')"
	if [ -f "$dirs" ]; then
		cmd="select"
	elif [ -d "$dirs" ]; then
		cmd="cd"
	fi
	lf -remote "send $id $cmd \"$dirs\""
}}

# key mappings ---------------------------------------------------------------

# clear default mappings
map c
map d
map e
map f
map n
map q
map t
map w

# custom mappings
map . set hidden!
map p paste
map Y cut
map dd trash
map D delete
map e $$EDITOR "$f"
map <c-r> reload
map H top
map L bottom
map x $$f
map <enter> shell
map S shellcmd
map q quit
map Q quit
map <space> toggle
map <esc> :clear; unselect
map ga calcdirsize
map ff :fzf_jump
map P :pdfcat

# rename
map A rename # at the end
map c push A<c-u> # new filename
map I push A<c-a> # from the beginning
map i push A<a-b><a-b><a-f> # before extension
map a push A<a-b> # after extension
map C :bulkrename

# symlinks mappings
map al :link
map gF follow_link
