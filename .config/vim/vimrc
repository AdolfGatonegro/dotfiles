" ----------------------------------------------------------------------------
" vimrc - vim config file
" gatoneg.ro
" ----------------------------------------------------------------------------

" set xdg environment for vim ------------------------------------------------
if empty("$XDG_CACHE_HOME")
	let $XDG_CACHE_HOME="$HOME/.cache"
endif

if empty("$XDG_CONFIG_HOME")
	let $XDG_CONFIG_HOME="$HOME/.config"
endif

if empty("$XDG_DATA_HOME")
	let $XDG_DATA_HOME="$HOME/.local/share"
endif

set directory=$XDG_CACHE_HOME/vim/swap,~/,/tmp
set backupdir=$XDG_CACHE_HOME/vim/backup,~/,/tmp
set undodir=$XDG_CACHE_HOME/vim/undo,~/,/tmp
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
set runtimepath+=$XDG_CONFIG_HOME/vim
" set packpath+=$XDG_CONFIG_HOME/vim
let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc"

" vim-plug -------------------------------------------------------------------
" fetch plug.vim if needed
if empty(glob('$XDG_CONFIG_HOME/vim/autoload/plug.vim'))
  silent !curl -fLo $XDG_CONFIG_HOME/vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif

call plug#begin('$XDG_CONFIG_HOME/vim/plugged')
	Plug 'adolfgatonegro/tokyonight-vim'
	Plug 'tpope/vim-sensible'
	Plug 'tpope/vim-commentary'
	Plug 'ap/vim-css-color'
	Plug 'itchyny/lightline.vim'
	Plug 'jiangmiao/auto-pairs'
	Plug 'voldikss/vim-floaterm'
	Plug 'lervag/vimtex', { 'for': 'tex' }
	Plug 'neoclide/coc.nvim', {'branch': 'release'}
	Plug 'SirVer/ultisnips'
	Plug 'adolfgatonegro/latex-snippets-vim'
call plug#end()

" colours --------------------------------------------------------------------
set termguicolors

let g:tokyonight_style = 'gatonegro'
let g:tokyonight_enable_italic = 1
let g:tokyonight_transparent_background = 1

colorscheme tokyonight

" lightline ------------------------------------------------------------------
let g:lightline = {'colorscheme': 'tokyonight'}

" options --------------------------------------------------------------------
set number
set numberwidth=4
set cmdheight=1
set tabstop=4
set shiftwidth=4
set softtabstop=0 noexpandtab
set showtabline=2
set hlsearch
set ignorecase
set confirm
set clipboard=unnamedplus
set undofile
set wildmode=longest:full,full
set wildignorecase
set scrolloff=10
set hidden

set list
set listchars=tab:>-
set listchars+=space:•
set listchars+=trail:⋄

set splitbelow splitright

:autocmd InsertEnter,InsertLeave * set cursorline!

let mapleader="\<Space>"
let maplocalleader=","

" abbreviations
" iab hbs #! /usr/bin/env bash<CR>

" coc.nvim -------------------------------------------------------------------
let g:coc_global_extensions = ['coc-pyright', 'coc-sh', 'coc-vimtex', 'coc-css']
let g:coc_config_home = "XDG_CONFIG_HOME/vim"

inoremap <expr> <cr> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"
inoremap <silent><expr> <C-j> coc#pum#visible() ? coc#pum#next(0) : "\<Down>"
inoremap <silent><expr> <C-k> coc#pum#visible() ? coc#pum#prev(0) : "\<Up>"
inoremap <silent><expr> <C-q> coc#pum#visible() ? coc#pum#stop() : "\<C-q>"

" cursors --------------------------------------------------------------------
let &t_SI = "\e[6 q"
let &t_SR = "\e[4 q"
let &t_EI = "\e[2 q"

" key mapping ----------------------------------------------------------------
map Q <Nop>
map q <Nop>

nnoremap <silent> <leader>* :set hlsearch!<CR>
nnoremap <leader>wr :set wrap!<CR>

noremap l <Space>
noremap h <Backspace>
noremap j gj
noremap k gk
nnoremap H ^
nnoremap L $

" move/indent text blocks
xnoremap J :move '>+1<CR>gv-gv
xnoremap K :move '<-2<CR>gv-gv
xnoremap > >gv
xnoremap < <gv

" highlight last inserted text
nnoremap gV `[v`]

" spell check
nnoremap <F4> ":setlocal spell! spelllang=es_mx<CR>
nnoremap <F5> ":setlocal spell! spelllang=en_gb<CR>

" split navigation
nnoremap <silent> <C-k> <C-w>k
nnoremap <silent> <C-j> <C-w>j
nnoremap <silent> <C-h> <C-w>h
nnoremap <silent> <C-l> <C-w>l

" split resizing
nnoremap <silent> <C-up> :resize +2<CR>
nnoremap <silent> <C-down> :resize -2<CR>
nnoremap <silent> <C-left> :vertical resize -2<CR>
nnoremap <silent> <C-right> :vertical resize +2<CR>

" buffers
nnoremap <silent> <leader>e :enew<CR>
nnoremap <silent> <leader>bl :ls<CR>
nnoremap <silent> <leader>l :bnext<CR>
nnoremap <silent> <leader>h :bprevious<CR>
nnoremap <silent> <leader>q :bp <BAR> bd #<CR>
nnoremap <silent> <leader>bs :new<CR>
nnoremap <silent> <leader>bv :vnew<CR>

" tabs
nnoremap <silent> <leader>tp :tabprevious<CR>
nnoremap <silent> <leader>tn :tabnext<CR>
nnoremap <silent> <leader>tt :tabnew<CR>

" write/exit
nnoremap <silent> <C-q> :x<CR>
nnoremap <silent> <C-s> :up<CR>

" search for selection
vnoremap * "zy:let @/=@z<C-r>n<CR>

" <S-Tab> in visual mode to number lines...
xnoremap <S-Tab> :s/\%V/0<C-V><Tab>/<CR>gvg<C-A>gv:retab<Esc>gvI<C-G>u<Esc>gv/ <CR>:s/\%V /./<CR>

" vimtex ---------------------------------------------------------------------
let g:tex_flavor = 'latex'
let g:vimtex_view_method = 'zathura'

" ultisnips ------------------------------------------------------------------
let g:UltiSnipsExpandTrigger = '<Tab>'
let g:UltiSnipsJumpForwardTrigger = '<C-j>'
let g:UltiSnipsJumpBackwardTrigger = '<C-k>'

" vim-floaterm ---------------------------------------------------------------
let g:floaterm_width = 0.8
let g:floaterm_height = 0.8
let g:floaterm_wintype = 'float'
let g:floaterm_opener = 'edit'

map <leader>f :FloatermNew lf<CR>
map <leader>sf :FloatermNew --wintype=split --height=0.5 --opener=split lf<CR>
map <leader>vf :FloatermNew --wintype=vsplit --width=0.5 --opener=vsplit lf<CR>

" misc  ----------------------------------------------------------------------
" run current python file in :Floaterm
autocmd filetype python nnoremap <silent> <F5> :w<CR>:FloatermNew --wintype=split --height=0.5 --autoclose=0 python %<CR>

" toggle line numbers
augroup number_toggle
	autocmd!
	autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &nu && mode() != "i" | set rnu   | endif
	autocmd BufLeave,FocusLost,InsertEnter,WinLeave   * if &nu                  | set nornu | endif
augroup end

" restore cursor position
augroup resume_edit_position
	autocmd!
	autocmd BufReadPost *
		\ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
		\ | execute "normal! g`\"zvzz"
		\ | endif
augroup end

" set line width for md, txt, tex
augroup text_file_width
	autocmd!
	autocmd BufNewFile,BufRead *.md,*.MD,*.markdown,*.txt,*.tex setlocal textwidth=78
augroup end

" set up templates for some files
augroup templates
	autocmd!
	autocmd BufNewFile *.sh 0r $XDG_CONFIG_HOME/vim/templates/skeleton.sh | execute "normal! G"
	autocmd BufNewFile *.tex 0r $XDG_CONFIG_HOME/vim/templates/skeleton.tex | execute "normal! G"
augroup end

" replace netrw with lf - taken from lf.vim because I don't actually want the
" rest of the functionality
function! OpenLfIn(path, edit_cmd)
  let currentPath = shellescape(isdirectory(a:path) ? fnamemodify(expand(a:path), ":p:h") : expand(a:path))
  let s:edit_cmd = a:edit_cmd
  if exists(":FloatermNew")
    exec 'FloatermNew --autoinsert=true lf -- ' . currentPath
  else
    echoerr "Failed to open a floating terminal. Make sure `voldikss/vim-floaterm` is installed."
  endif
endfun

augroup replace_netrw_lf
    autocmd VimEnter * silent! autocmd! FileExplorer
    autocmd BufEnter * let s:buf_path = expand("%") | let s:default_edit_cmd = 'edit'| if isdirectory(s:buf_path) | bdelete! | call timer_start(100, {->OpenLfIn(s:buf_path, s:default_edit_cmd)}) | endif
  augroup end
