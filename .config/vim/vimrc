" vimrc
" gatoneg.ro
" last update: 2022-10-13

" set xdg environment for vim ------------------------------------------------
if empty("$XDG_CACHE_HOME")
	let $XDG_CACHE_HOME="$HOME/.cache"
endif

if empty("$XDG_CONFIG_HOME")
	let $XDG_CONFIG_HOME="$HOME/.config"
endif

if empty("$XDG_DATA_HOME")
	let $XDG_DATA_HOME="$HOME/.local/share"
endif

set directory=$XDG_CACHE_HOME/vim/swap,~/,/tmp
set backupdir=$XDG_CACHE_HOME/vim/backup,~/,/tmp
set undodir=$XDG_CACHE_HOME/vim/undo,~/,/tmp
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
set runtimepath+=$XDG_CONFIG_HOME/vim
" set packpath+=$XDG_CONFIG_HOME/vim
let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc"

" vim-plug -------------------------------------------------------------------
" fetch plug.vim if needed
if empty(glob('$XDG_CONFIG_HOME/vim/autoload/plug.vim'))
  silent !curl -fLo $XDG_CONFIG_HOME/vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif

call plug#begin('$XDG_CONFIG_HOME/vim/plugged')
	Plug 'adolfgatonegro/tokyonight-vim'
	Plug 'tpope/vim-sensible'
	Plug 'tpope/vim-commentary'
	Plug 'ap/vim-css-color'
	Plug 'itchyny/lightline.vim'
	Plug 'jiangmiao/auto-pairs'
	Plug 'vifm/vifm.vim'
	Plug 'lervag/vimtex', { 'for': 'tex' }
	Plug 'neoclide/coc.nvim', {'branch': 'release'}
call plug#end()

" colours --------------------------------------------------------------------
set termguicolors

let g:tokyonight_style = 'night'
let g:tokyonight_enable_italic = 1
let g:tokyonight_transparent_background = 1

colorscheme tokyonight

" lightline ------------------------------------------------------------------
let g:lightline = {'colorscheme': 'tokyonight'}

" options --------------------------------------------------------------------
set number
set numberwidth=4
set cmdheight=1
set tabstop=4
set shiftwidth=4
set softtabstop=0 noexpandtab
set showtabline=2
set hlsearch
set ignorecase
set confirm
set clipboard=unnamedplus
set undofile
set wildmode=longest:full,full

set list
set listchars=tab:>-
set listchars+=space:•
set listchars+=trail:⋄

:autocmd InsertEnter,InsertLeave * set cursorline! " cursorline for insert mode

let mapleader="`"

" coc extensions -------------------------------------------------------------
let g:coc_global_extensions = ['coc-pyright', 'coc-sh']

" use <tab> for trigger completion and navigate to the next complete item
function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr> <S-Tab> coc#pum#visible() ? coc#pum#prev(1) : "\<S-Tab>"

" cursors --------------------------------------------------------------------
let &t_SI = "\e[6 q"
let &t_SR = "\e[4 q"
let &t_EI = "\e[2 q"

" key mapping ----------------------------------------------------------------
map Q <Nop>
map q <Nop>

nnoremap <silent><expr> <leader>hl (&hls && v:hlsearch ? ':nohls' : ':set hls')."\n"
nnoremap <C-x> :set wrap!<CR>

noremap j gj
noremap k gk

" move/indent text blocks
xnoremap J :move '>+1<CR>gv-gv
xnoremap K :move '<-2<CR>gv-gv
xnoremap > >gv
xnoremap < <gv

" highlight last inserted text
nnoremap gV `[v`]

" spell check
nnoremap <F4> ":setlocal spell! spelllang=es_mx<CR>
nnoremap <F5> ":setlocal spell! spelllang=en_gb<CR>

" tabs
nnoremap <silent> <leader>p :tabprevious<CR>
nnoremap <silent> <leader>n :tabnext<CR>
nnoremap <silent> <leader>t :tabnew<CR>

" split navigation
nnoremap <silent> <C-k> <C-w>k
nnoremap <silent> <C-j> <C-w>j
nnoremap <silent> <C-h> <C-w>h
nnoremap <silent> <C-l> <C-w>l

" split resizing
nnoremap <silent> <C-up> :resize +2<CR>
nnoremap <silent> <C-down> :resize -2<CR>
nnoremap <silent> <C-left> :vertical resize -2<CR>
nnoremap <silent> <C-right> :vertical resize +2<CR>

" buffers
nnoremap <silent> <S-l> :bnext<CR>
nnoremap <silent> <S-h> :bprevious<CR>
nnoremap <silent> <S-x> :bd<CR>

" vifm.vim
nnoremap <silent> <leader>vf :Vifm<CR>
nnoremap <silent> <leader>vs :VsplitVifm<CR>
nnoremap <silent> <leader>sp :SplitVifm<CR>
nnoremap <silent> <leader>dv :DiffVifm<CR>
nnoremap <silent> <leader>vt :TabVifm<CR>

" write/exit
nnoremap <silent> <leader>q :x<CR>
nnoremap <silent> <C-q> :x<CR>
nnoremap <silent> <leader>Q :qa<CR>
nnoremap <silent><C-s> :update<CR>

" " vimtex ---------------------------------------------------------------------
" let g:tex_flavor = 'latex'
" let g:vimtex_view_method = 'zathura'

" misc  ----------------------------------------------------------------------
" toggle line numbers
augroup number_toggle
	autocmd!
	autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &nu && mode() != "i" | set rnu   | endif
	autocmd BufLeave,FocusLost,InsertEnter,WinLeave   * if &nu                  | set nornu | endif
augroup end

" restore cursor position
augroup resume_edit_position
	autocmd!
	autocmd BufReadPost *
		\ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
		\ | execute "normal! g`\"zvzz"
		\ | endif
augroup end

" set line width for md, txt, tex
augroup text_file_width
	autocmd!
	autocmd BufNewFile,BufRead *.md,*.MD,*.markdown,*.txt,*.tex setlocal textwidth=78
augroup end
