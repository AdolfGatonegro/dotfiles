# Source zsh files
zsh_source_file() {
    [ -f "$ZDOTDIR/$1" ] && source "$ZDOTDIR/$1"
}
# Add plugins
zsh_add_plugin() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then 
        zsh_source_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh" || \
        zsh_source_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.zsh"
    else
        echo "Cloning missing plugins..."
		git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
    fi
}

# cd up [1-9] times
.{1..9} (){ local d=.; repeat ${0:1} d+=/..; cd $d;}

# Extract archive files
ex (){
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2)   tar xjf $1   ;;
			*.tar.gz)    tar xzf $1   ;;
			*.bz2)       bunzip2 $1   ;;
			*.rar)       unrar x $1   ;;
			*.gz)        gunzip $1    ;;
			*.tar)       tar xf $1    ;;
			*.tbz2)      tar xjf $1   ;;
			*.tgz)       tar xzf $1   ;;
			*.zip)       unzip $1     ;;
			*.Z)         uncompress $1;;
			*.7z)        7z x $1      ;;
			*.deb)       ar x $1      ;;
			*.tar.xz)    tar xf $1    ;;
			*.tar.zst)   tar xf $1    ;;
			*)           echo "'$1' cannot be extracted via ex()" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

# Don't add failed commands to history
zshaddhistory() {
	whence ${${(z)1}[1]} >| /dev/null || return 1
}

# Git status on prompt
# adapted from this gist by Sebastian Celis
# https://gist.github.com/scelis/244215
update_current_git_vars(){
	unset __CURRENT_GIT_BRANCH
	unset __CURRENT_GIT_BRANCH_STATUS
	unset __CURRENT_GIT_BRANCH_IS_DIRTY

	local st="$(git status 2>/dev/null)"
	if [[ -n "$st" ]]; then
		local -a arr
		arr=(${(f)st})

		if [[ $arr[1] =~ 'Not currently on any branch.' ]]; then
			__CURRENT_GIT_BRANCH='no-branch'
		else
			__CURRENT_GIT_BRANCH="${arr[1][(w)4]}";
		fi

		if [[ $arr[2] =~ 'Your branch is' ]]; then
			if [[ $arr[2] =~ 'ahead' ]]; then
				__CURRENT_GIT_BRANCH_STATUS='ahead'
			elif [[ $arr[2] =~ 'diverged' ]]; then
				__CURRENT_GIT_BRANCH_STATUS='diverged'
			elif [[ $arr[2] =~ 'up to date' ]]; then
				__CURRENT_GIT_BRANCH_STATUS='uptodate'
			else
				__CURRENT_GIT_BRANCH_STATUS='behind'
			fi
		fi

		if [[ ! $st =~ 'nothing to commit' ]]; then
			__CURRENT_GIT_BRANCH_IS_DIRTY='1'
		fi
	fi
}

prompt_git_info(){
	if [ -n "$__CURRENT_GIT_BRANCH" ]; then
		local o="on ÓÇ†"
		local b="$__CURRENT_GIT_BRANCH"
		case "$__CURRENT_GIT_BRANCH_STATUS" in
			ahead)
			s+="Ôïú"
			;;
			diverged)
			s+="ùåé"
			;;
			uptodate)
			s+="üó∏"
			;;
			behind)
			s+="ÔïÑ"
			;;
		esac
		if [ -n "$__CURRENT_GIT_BRANCH_IS_DIRTY" ]; then
			local d="‚úó"
		fi
	 
		printf "%s" " %F{white}$o" " %F{blue}$b" " %F{green}%}$s" " %F{red}$d"
	fi
}

chpwd_update_git_vars(){
	update_current_git_vars
}

preexec_update_git_vars(){
	case "$1" in 
		git* | g[saclpdb]*)
		__EXECUTED_GIT_COMMAND=1
		;;
	esac
}

precmd_update_git_vars(){
	if [ -n "$__EXECUTED_GIT_COMMAND" ]; then
		update_current_git_vars
		unset __EXECUTED_GIT_COMMAND
	fi
}

zsh_source_file(){
	[ -f "$ZDOTDIR/$1" ] && source "$ZDOTDIR/$1"
}

zsh_exit(){exit}

precmd() {
	if [ -z "$_NEW_LINE_BEFORE_PROMPT" ]; then
		_NEW_LINE_BEFORE_PROMPT=1
	else
		print ""
	fi
}
